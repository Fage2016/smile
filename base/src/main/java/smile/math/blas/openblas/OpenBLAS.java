/*
 * Copyright (c) 2010-2025 Haifeng Li. All rights reserved.
 *
 * Smile is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Smile is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Smile. If not, see <https://www.gnu.org/licenses/>.
 */
package smile.math.blas.openblas;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import smile.math.blas.*;
import static smile.math.blas.openblas.cblas_openblas_h.*;

/**
 * OpenBLAS library wrapper. Note that LAPACK header is generated by f2c.
 * In Fortran, primitive types are typically passed by reference by default.
 *
 * @author Haifeng Li
 */
public class OpenBLAS implements BLAS, LAPACK {
    /** Constructor. */
    public OpenBLAS() {

    }

    @Override
    public double asum(int n, double[] x, int incx) {
        var x_ = MemorySegment.ofArray(x);
        return cblas_dasum(n, x_, incx);
    }

    @Override
    public float asum(int n, float[] x, int incx) {
        var x_ = MemorySegment.ofArray(x);
        return cblas_sasum(n, x_, incx);
    }

    @Override
    public void axpy(int n, double alpha, double[] x, int incx, double[] y, int incy) {
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_daxpy(n, alpha, x_, incx, y_, incy);
    }

    @Override
    public void axpy(int n, float alpha, float[] x, int incx, float[] y, int incy) {
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_saxpy(n, alpha, x_, incx, y_, incy);
    }

    @Override
    public double dot(int n, double[] x, int incx, double[] y, int incy) {
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        return cblas_ddot(n, x_, incx, y_, incy);
    }

    @Override
    public float dot(int n, float[] x, int incx, float[] y, int incy) {
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        return cblas_sdot(n, x_, incx, y_, incy);
    }

    @Override
    public double nrm2(int n, double[] x, int incx) {
        var x_ = MemorySegment.ofArray(x);
        return cblas_dnrm2(n, x_, incx);
    }

    @Override
    public float nrm2(int n, float[] x, int incx) {
        var x_ = MemorySegment.ofArray(x);
        return cblas_snrm2(n, x_, incx);
    }

    @Override
    public void scal(int n, double alpha, double[] x, int incx) {
        var x_ = MemorySegment.ofArray(x);
        cblas_dscal(n, alpha, x_, incx);
    }

    @Override
    public void scal(int n, float alpha, float[] x, int incx) {
        var x_ = MemorySegment.ofArray(x);
        cblas_sscal(n, alpha, x_, incx);
    }

    @Override
    public void swap(int n, double[] x, int incx, double[] y, int incy) {
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_dswap(n, x_, incx, y_, incy);
    }

    @Override
    public void swap(int n, float[] x, int incx, float[] y, int incy) {
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_sswap(n, x_, incx, y_, incy);
    }

    @Override
    public long iamax(int n, double[] x, int incx) {
        var x_ = MemorySegment.ofArray(x);
        return cblas_idamax(n, x_, incx);
    }

    @Override
    public long iamax(int n, float[] x, int incx) {
        var x_ = MemorySegment.ofArray(x);
        return cblas_isamax(n, x_, incx);
    }

    @Override
    public void gemv(Layout layout, Transpose trans, int m, int n, double alpha, double[] A, int lda, double[] x, int incx, double beta, double[] y, int incy) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_dgemv(layout.blas(), trans.blas(), m, n, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void gemv(Layout layout, Transpose trans, int m, int n, double alpha, DoubleBuffer A, int lda, DoubleBuffer x, int incx, double beta, DoubleBuffer y, int incy) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        var y_ = MemorySegment.ofBuffer(y);
        cblas_dgemv(layout.blas(), trans.blas(), m, n, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void gemv(Layout layout, Transpose trans, int m, int n, double alpha, MemorySegment A, int lda, MemorySegment x, int incx, double beta, MemorySegment y, int incy) {
        cblas_dgemv(layout.blas(), trans.blas(), m, n, alpha, A, lda, x, incx, beta, y, incy);
    }

    @Override
    public void gemv(Layout layout, Transpose trans, int m, int n, float alpha, float[] A, int lda, float[] x, int incx, float beta, float[] y, int incy) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_sgemv(layout.blas(), trans.blas(), m, n, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void gemv(Layout layout, Transpose trans, int m, int n, float alpha, FloatBuffer A, int lda, FloatBuffer x, int incx, float beta, FloatBuffer y, int incy) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        var y_ = MemorySegment.ofBuffer(y);
        cblas_sgemv(layout.blas(), trans.blas(), m, n, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void symv(Layout layout, UPLO uplo, int n, double alpha, double[] A, int lda, double[] x, int incx, double beta, double[] y, int incy) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_dsymv(layout.blas(), uplo.blas(), n, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void symv(Layout layout, UPLO uplo, int n, double alpha, DoubleBuffer A, int lda, DoubleBuffer x, int incx, double beta, DoubleBuffer y, int incy) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        var y_ = MemorySegment.ofBuffer(y);
        cblas_dsymv(layout.blas(), uplo.blas(), n, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void symv(Layout layout, UPLO uplo, int n, double alpha, MemorySegment A, int lda, MemorySegment x, int incx, double beta, MemorySegment y, int incy) {
        cblas_dsymv(layout.blas(), uplo.blas(), n, alpha, A, lda, x, incx, beta, y, incy);
    }

    @Override
    public void symv(Layout layout, UPLO uplo, int n, float alpha, float[] A, int lda, float[] x, int incx, float beta, float[] y, int incy) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_ssymv(layout.blas(), uplo.blas(), n, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void symv(Layout layout, UPLO uplo, int n, float alpha, FloatBuffer A, int lda, FloatBuffer x, int incx, float beta, FloatBuffer y, int incy) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        var y_ = MemorySegment.ofBuffer(y);
        cblas_ssymv(layout.blas(), uplo.blas(), n, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void spmv(Layout layout, UPLO uplo, int n, double alpha, double[] A, double[] x, int incx, double beta, double[] y, int incy) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_dspmv(layout.blas(), uplo.blas(), n, alpha, A_, x_, incx, beta, y_, incy);
    }

    @Override
    public void spmv(Layout layout, UPLO uplo, int n, double alpha, DoubleBuffer A, DoubleBuffer x, int incx, double beta, DoubleBuffer y, int incy) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        var y_ = MemorySegment.ofBuffer(y);
        cblas_dspmv(layout.blas(), uplo.blas(), n, alpha, A_, x_, incx, beta, y_, incy);
    }

    @Override
    public void spmv(Layout layout, UPLO uplo, int n, float alpha, float[] A, float[] x, int incx, float beta, float[] y, int incy) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_sspmv(layout.blas(), uplo.blas(), n, alpha, A_, x_, incx, beta, y_, incy);
    }

    @Override
    public void spmv(Layout layout, UPLO uplo, int n, float alpha, FloatBuffer A, FloatBuffer x, int incx, float beta, FloatBuffer y, int incy) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        var y_ = MemorySegment.ofBuffer(y);
        cblas_sspmv(layout.blas(), uplo.blas(), n, alpha, A_, x_, incx, beta, y_, incy);
    }

    @Override
    public void trmv(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, double[] A, int lda, double[] x, int incx) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        cblas_dtrmv(layout.blas(), uplo.blas(), trans.blas(), diag.blas(), n, A_, lda, x_, incx);
    }

    @Override
    public void trmv(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, DoubleBuffer A, int lda, DoubleBuffer x, int incx) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        cblas_dtrmv(layout.blas(), uplo.blas(), trans.blas(), diag.blas(), n, A_, lda, x_, incx);
    }

    @Override
    public void trmv(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, MemorySegment A, int lda, MemorySegment x, int incx) {
        cblas_dtrmv(layout.blas(), uplo.blas(), trans.blas(), diag.blas(), n, A, lda, x, incx);
    }

    @Override
    public void trmv(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, float[] A, int lda, float[] x, int incx) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        cblas_strmv(layout.blas(), uplo.blas(), trans.blas(), diag.blas(), n, A_, lda, x_, incx);
    }

    @Override
    public void trmv(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, FloatBuffer A, int lda, FloatBuffer x, int incx) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        cblas_strmv(layout.blas(), uplo.blas(), trans.blas(), diag.blas(), n, A_, lda, x_, incx);
    }

    @Override
    public void tpmv(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, double[] A, double[] x, int incx) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        cblas_dtpmv(layout.blas(), uplo.blas(), trans.blas(), diag.blas(), n, A_, x_, incx);
    }

    @Override
    public void tpmv(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, DoubleBuffer A, DoubleBuffer x, int incx) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        cblas_dtpmv(layout.blas(), uplo.blas(), trans.blas(), diag.blas(), n, A_, x_, incx);
    }

    @Override
    public void tpmv(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, float[] A, float[] x, int incx) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        cblas_stpmv(layout.blas(), uplo.blas(), trans.blas(), diag.blas(), n, A_, x_, incx);
    }

    @Override
    public void tpmv(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, FloatBuffer A, FloatBuffer x, int incx) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        cblas_stpmv(layout.blas(), uplo.blas(), trans.blas(), diag.blas(), n, A_, x_, incx);
    }

    @Override
    public void gbmv(Layout layout, Transpose trans, int m, int n, int kl, int ku, double alpha, double[] A, int lda, double[] x, int incx, double beta, double[] y, int incy) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_dgbmv(layout.blas(), trans.blas(), m, n, kl, ku, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void gbmv(Layout layout, Transpose trans, int m, int n, int kl, int ku, double alpha, DoubleBuffer A, int lda, DoubleBuffer x, int incx, double beta, DoubleBuffer y, int incy) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        var y_ = MemorySegment.ofBuffer(y);
        cblas_dgbmv(layout.blas(), trans.blas(), m, n, kl, ku, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void gbmv(Layout layout, Transpose trans, int m, int n, int kl, int ku, float alpha, float[] A, int lda, float[] x, int incx, float beta, float[] y, int incy) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_sgbmv(layout.blas(), trans.blas(), m, n, kl, ku, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void gbmv(Layout layout, Transpose trans, int m, int n, int kl, int ku, float alpha, FloatBuffer A, int lda, FloatBuffer x, int incx, float beta, FloatBuffer y, int incy) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        var y_ = MemorySegment.ofBuffer(y);
        cblas_sgbmv(layout.blas(), trans.blas(), m, n, kl, ku, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void sbmv(Layout layout, UPLO uplo, int n, int k, double alpha, double[] A, int lda, double[] x, int incx, double beta, double[] y, int incy) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_dsbmv(layout.blas(), uplo.blas(), n, k, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void sbmv(Layout layout, UPLO uplo, int n, int k, double alpha, DoubleBuffer A, int lda, DoubleBuffer x, int incx, double beta, DoubleBuffer y, int incy) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        var y_ = MemorySegment.ofBuffer(y);
        cblas_dsbmv(layout.blas(), uplo.blas(), n, k, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void sbmv(Layout layout, UPLO uplo, int n, int k, float alpha, float[] A, int lda, float[] x, int incx, float beta, float[] y, int incy) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_ssbmv(layout.blas(), uplo.blas(), n, k, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void sbmv(Layout layout, UPLO uplo, int n, int k, float alpha, FloatBuffer A, int lda, FloatBuffer x, int incx, float beta, FloatBuffer y, int incy) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        var y_ = MemorySegment.ofBuffer(y);
        cblas_ssbmv(layout.blas(), uplo.blas(), n, k, alpha, A_, lda, x_, incx, beta, y_, incy);
    }

    @Override
    public void ger(Layout layout, int m, int n, double alpha, double[] x, int incx, double[] y, int incy, double[] A, int lda) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_dger(layout.blas(), m, n, alpha, x_, incx, y_, incy, A_, lda);
    }

    @Override
    public void ger(Layout layout, int m, int n, double alpha, DoubleBuffer x, int incx, DoubleBuffer y, int incy, DoubleBuffer A, int lda) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        var y_ = MemorySegment.ofBuffer(y);
        cblas_dger(layout.blas(), m, n, alpha, x_, incx, y_, incy, A_, lda);
    }

    @Override
    public void ger(Layout layout, int m, int n, double alpha, MemorySegment x, int incx, MemorySegment y, int incy, MemorySegment A, int lda) {
        cblas_dger(layout.blas(), m, n, alpha, x, incx, y, incy, A, lda);
    }

    @Override
    public void ger(Layout layout, int m, int n, float alpha, float[] x, int incx, float[] y, int incy, float[] A, int lda) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        var y_ = MemorySegment.ofArray(y);
        cblas_sger(layout.blas(), m, n, alpha, x_, incx, y_, incy, A_, lda);
    }

    @Override
    public void ger(Layout layout, int m, int n, float alpha, FloatBuffer x, int incx, FloatBuffer y, int incy, FloatBuffer A, int lda) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        var y_ = MemorySegment.ofBuffer(y);
        cblas_sger(layout.blas(), m, n, alpha, x_, incx, y_, incy, A_, lda);
    }

    @Override
    public void syr(Layout layout, UPLO uplo, int n, double alpha, double[] x, int incx, double[] A, int lda) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        cblas_dsyr(layout.blas(), uplo.blas(), n, alpha, x_, incx, A_, lda);
    }

    @Override
    public void syr(Layout layout, UPLO uplo, int n, double alpha, DoubleBuffer x, int incx, DoubleBuffer A, int lda) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        cblas_dsyr(layout.blas(), uplo.blas(), n, alpha, x_, incx, A_, lda);
    }

    @Override
    public void syr(Layout layout, UPLO uplo, int n, double alpha, MemorySegment x, int incx, MemorySegment A, int lda) {
        cblas_dsyr(layout.blas(), uplo.blas(), n, alpha, x, incx, A, lda);
    }

    @Override
    public void syr(Layout layout, UPLO uplo, int n, float alpha, float[] x, int incx, float[] A, int lda) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        cblas_ssyr(layout.blas(), uplo.blas(), n, alpha, x_, incx, A_, lda);
    }

    @Override
    public void syr(Layout layout, UPLO uplo, int n, float alpha, FloatBuffer x, int incx, FloatBuffer A, int lda) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        cblas_ssyr(layout.blas(), uplo.blas(), n, alpha, x_, incx, A_, lda);
    }

    @Override
    public void spr(Layout layout, UPLO uplo, int n, double alpha, double[] x, int incx, double[] A) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        cblas_dspr(layout.blas(), uplo.blas(), n, alpha, x_, incx, A_);
    }

    @Override
    public void spr(Layout layout, UPLO uplo, int n, double alpha, DoubleBuffer x, int incx, DoubleBuffer A) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        cblas_dspr(layout.blas(), uplo.blas(), n, alpha, x_, incx, A_);
    }

    @Override
    public void spr(Layout layout, UPLO uplo, int n, float alpha, float[] x, int incx, float[] A) {
        var A_ = MemorySegment.ofArray(A);
        var x_ = MemorySegment.ofArray(x);
        cblas_sspr(layout.blas(), uplo.blas(), n, alpha, x_, incx, A_);
    }

    @Override
    public void spr(Layout layout, UPLO uplo, int n, float alpha, FloatBuffer x, int incx, FloatBuffer A) {
        var A_ = MemorySegment.ofBuffer(A);
        var x_ = MemorySegment.ofBuffer(x);
        cblas_sspr(layout.blas(), uplo.blas(), n, alpha, x_, incx, A_);
    }

    @Override
    public void gemm(Layout layout, Transpose transA, Transpose transB, int m, int n, int k, double alpha, double[] A, int lda, double[] B, int ldb, double beta, double[] C, int ldc) {
        var A_ = MemorySegment.ofArray(A);
        var B_ = MemorySegment.ofArray(B);
        var C_ = MemorySegment.ofArray(C);
        cblas_dgemm(layout.blas(), transA.blas(), transB.blas(), m, n, k, alpha, A_, lda, B_, ldb, beta, C_, ldc);
    }

    @Override
    public void gemm(Layout layout, Transpose transA, Transpose transB, int m, int n, int k, double alpha, DoubleBuffer A, int lda, DoubleBuffer B, int ldb, double beta, DoubleBuffer C, int ldc) {
        var A_ = MemorySegment.ofBuffer(A);
        var B_ = MemorySegment.ofBuffer(B);
        var C_ = MemorySegment.ofBuffer(C);
        cblas_dgemm(layout.blas(), transA.blas(), transB.blas(), m, n, k, alpha, A_, lda, B_, ldb, beta, C_, ldc);
    }

    @Override
    public void gemm(Layout layout, Transpose transA, Transpose transB, int m, int n, int k, double alpha, MemorySegment A, int lda, MemorySegment B, int ldb, double beta, MemorySegment C, int ldc) {
        cblas_dgemm(layout.blas(), transA.blas(), transB.blas(), m, n, k, alpha, A, lda, B, ldb, beta, C, ldc);
    }

    @Override
    public void gemm(Layout layout, Transpose transA, Transpose transB, int m, int n, int k, float alpha, float[] A, int lda, float[] B, int ldb, float beta, float[] C, int ldc) {
        var A_ = MemorySegment.ofArray(A);
        var B_ = MemorySegment.ofArray(B);
        var C_ = MemorySegment.ofArray(C);
        cblas_sgemm(layout.blas(), transA.blas(), transB.blas(), m, n, k, alpha, A_, lda, B_, ldb, beta, C_, ldc);
    }

    @Override
    public void gemm(Layout layout, Transpose transA, Transpose transB, int m, int n, int k, float alpha, FloatBuffer A, int lda, FloatBuffer B, int ldb, float beta, FloatBuffer C, int ldc) {
        var A_ = MemorySegment.ofBuffer(A);
        var B_ = MemorySegment.ofBuffer(B);
        var C_ = MemorySegment.ofBuffer(C);
        cblas_sgemm(layout.blas(), transA.blas(), transB.blas(), m, n, k, alpha, A_, lda, B_, ldb, beta, C_, ldc);
    }

    @Override
    public void symm(Layout layout, Side side, UPLO uplo, int m, int n, double alpha, double[] A, int lda, double[] B, int ldb, double beta, double[] C, int ldc) {
        var A_ = MemorySegment.ofArray(A);
        var B_ = MemorySegment.ofArray(B);
        var C_ = MemorySegment.ofArray(C);
        cblas_dsymm(layout.blas(), side.blas(), uplo.blas(), m, n, alpha, A_, lda, B_, ldb, beta, C_, ldc);
    }

    @Override
    public void symm(Layout layout, Side side, UPLO uplo, int m, int n, double alpha, DoubleBuffer A, int lda, DoubleBuffer B, int ldb, double beta, DoubleBuffer C, int ldc) {
        var A_ = MemorySegment.ofBuffer(A);
        var B_ = MemorySegment.ofBuffer(B);
        var C_ = MemorySegment.ofBuffer(C);
        cblas_dsymm(layout.blas(), side.blas(), uplo.blas(), m, n, alpha, A_, lda, B_, ldb, beta, C_, ldc);
    }

    @Override
    public void symm(Layout layout, Side side, UPLO uplo, int m, int n, double alpha, MemorySegment A, int lda, MemorySegment B, int ldb, double beta, MemorySegment C, int ldc) {
        cblas_dsymm(layout.blas(), side.blas(), uplo.blas(), m, n, alpha, A, lda, B, ldb, beta, C, ldc);
    }

    @Override
    public void symm(Layout layout, Side side, UPLO uplo, int m, int n, float alpha, float[] A, int lda, float[] B, int ldb, float beta, float[] C, int ldc) {
        var A_ = MemorySegment.ofArray(A);
        var B_ = MemorySegment.ofArray(B);
        var C_ = MemorySegment.ofArray(C);
        cblas_ssymm(layout.blas(), side.blas(), uplo.blas(), m, n, alpha, A_, lda, B_, ldb, beta, C_, ldc);
    }

    @Override
    public void symm(Layout layout, Side side, UPLO uplo, int m, int n, float alpha, FloatBuffer A, int lda, FloatBuffer B, int ldb, float beta, FloatBuffer C, int ldc) {
        var A_ = MemorySegment.ofBuffer(A);
        var B_ = MemorySegment.ofBuffer(B);
        var C_ = MemorySegment.ofBuffer(C);
        cblas_ssymm(layout.blas(), side.blas(), uplo.blas(), m, n, alpha, A_, lda, B_, ldb, beta, C_, ldc);
    }

    @Override
    public int gesv(Layout layout, int n, int nrhs, double[] A, int lda, int[] ipiv, double[] B, int ldb) {
        try (Arena a = Arena.ofConfined()) {
            var A_ = MemorySegment.ofArray(A);
            var B_ = MemorySegment.ofArray(B);
            var ipiv_ = MemorySegment.ofArray(ipiv);

            var layout_ = a.allocate(ValueLayout.JAVA_INT);
            var n_ = a.allocate(ValueLayout.JAVA_INT);
            var nrhs_ = a.allocate(ValueLayout.JAVA_INT);
            var lda_ = a.allocate(ValueLayout.JAVA_INT);
            var ldb_ = a.allocate(ValueLayout.JAVA_INT);
            layout_.set(ValueLayout.JAVA_INT, 0, layout.lapack());
            n_.set(ValueLayout.JAVA_INT, 0, n);
            nrhs_.set(ValueLayout.JAVA_INT, 0, nrhs);
            lda_.set(ValueLayout.JAVA_INT, 0, lda);
            ldb_.set(ValueLayout.JAVA_INT, 0, ldb);
            return dgesv_(layout_, n_, nrhs_, A_, lda_, ipiv_, B_, ldb_);
        }
    }

    @Override
    public int gesv(Layout layout, int n, int nrhs, DoubleBuffer A, int lda, IntBuffer ipiv, DoubleBuffer B, int ldb) {
        try (Arena a = Arena.ofConfined()) {
            var A_ = MemorySegment.ofBuffer(A);
            var B_ = MemorySegment.ofBuffer(B);
            var ipiv_ = MemorySegment.ofBuffer(ipiv);

            var layout_ = a.allocate(ValueLayout.JAVA_INT);
            var n_ = a.allocate(ValueLayout.JAVA_INT);
            var nrhs_ = a.allocate(ValueLayout.JAVA_INT);
            var lda_ = a.allocate(ValueLayout.JAVA_INT);
            var ldb_ = a.allocate(ValueLayout.JAVA_INT);
            layout_.set(ValueLayout.JAVA_INT, 0, layout.lapack());
            n_.set(ValueLayout.JAVA_INT, 0, n);
            nrhs_.set(ValueLayout.JAVA_INT, 0, nrhs);
            lda_.set(ValueLayout.JAVA_INT, 0, lda);
            ldb_.set(ValueLayout.JAVA_INT, 0, ldb);
            return dgesv_(layout_, n_, nrhs_, A_, lda_, ipiv_, B_, ldb_);
        }
    }

    @Override
    public int gesv(Layout layout, int n, int nrhs, MemorySegment A, int lda, MemorySegment ipiv, MemorySegment B, int ldb) {
        try (Arena a = Arena.ofConfined()) {
            var layout_ = a.allocate(ValueLayout.JAVA_INT);
            var n_ = a.allocate(ValueLayout.JAVA_INT);
            var nrhs_ = a.allocate(ValueLayout.JAVA_INT);
            var lda_ = a.allocate(ValueLayout.JAVA_INT);
            var ldb_ = a.allocate(ValueLayout.JAVA_INT);
            layout_.set(ValueLayout.JAVA_INT, 0, layout.lapack());
            n_.set(ValueLayout.JAVA_INT, 0, n);
            nrhs_.set(ValueLayout.JAVA_INT, 0, nrhs);
            lda_.set(ValueLayout.JAVA_INT, 0, lda);
            ldb_.set(ValueLayout.JAVA_INT, 0, ldb);
            return dgesv_(layout_, n_, nrhs_, A, lda_, ipiv, B, ldb_);
        }
    }

    @Override
    public int gesv(Layout layout, int n, int nrhs, float[] A, int lda, int[] ipiv, float[] B, int ldb) {
        try (Arena a = Arena.ofConfined()) {
            var A_ = MemorySegment.ofArray(A);
            var B_ = MemorySegment.ofArray(B);
            var ipiv_ = MemorySegment.ofArray(ipiv);

            var layout_ = a.allocate(ValueLayout.JAVA_INT);
            var n_ = a.allocate(ValueLayout.JAVA_INT);
            var nrhs_ = a.allocate(ValueLayout.JAVA_INT);
            var lda_ = a.allocate(ValueLayout.JAVA_INT);
            var ldb_ = a.allocate(ValueLayout.JAVA_INT);
            layout_.set(ValueLayout.JAVA_INT, 0, layout.lapack());
            n_.set(ValueLayout.JAVA_INT, 0, n);
            nrhs_.set(ValueLayout.JAVA_INT, 0, nrhs);
            lda_.set(ValueLayout.JAVA_INT, 0, lda);
            ldb_.set(ValueLayout.JAVA_INT, 0, ldb);
            return sgesv_(layout_, n_, nrhs_, A_, lda_, ipiv_, B_, ldb_);
        }
    }

    @Override
    public int gesv(Layout layout, int n, int nrhs, FloatBuffer A, int lda, IntBuffer ipiv, FloatBuffer B, int ldb) {
        try (Arena a = Arena.ofConfined()) {
            var A_ = MemorySegment.ofBuffer(A);
            var B_ = MemorySegment.ofBuffer(B);
            var ipiv_ = MemorySegment.ofBuffer(ipiv);

            var layout_ = a.allocate(ValueLayout.JAVA_INT);
            var n_ = a.allocate(ValueLayout.JAVA_INT);
            var nrhs_ = a.allocate(ValueLayout.JAVA_INT);
            var lda_ = a.allocate(ValueLayout.JAVA_INT);
            var ldb_ = a.allocate(ValueLayout.JAVA_INT);
            layout_.set(ValueLayout.JAVA_INT, 0, layout.lapack());
            n_.set(ValueLayout.JAVA_INT, 0, n);
            nrhs_.set(ValueLayout.JAVA_INT, 0, nrhs);
            lda_.set(ValueLayout.JAVA_INT, 0, lda);
            ldb_.set(ValueLayout.JAVA_INT, 0, ldb);
            return sgesv_(layout_, n_, nrhs_, A_, lda_, ipiv_, B_, ldb_);
        }
    }

    @Override
    public int sysv(Layout layout, UPLO uplo, int n, int nrhs, double[] A, int lda, int[] ipiv, double[] B, int ldb) {
        try (Arena a = Arena.ofConfined()) {
            var A_ = MemorySegment.ofArray(A);
            var B_ = MemorySegment.ofArray(B);
            var ipiv_ = MemorySegment.ofArray(ipiv);

            var layout_ = a.allocate(ValueLayout.JAVA_INT);
            var uplo_ = a.allocate(ValueLayout.JAVA_INT);
            var n_ = a.allocate(ValueLayout.JAVA_INT);
            var nrhs_ = a.allocate(ValueLayout.JAVA_INT);
            var lda_ = a.allocate(ValueLayout.JAVA_INT);
            var ldb_ = a.allocate(ValueLayout.JAVA_INT);
            layout_.set(ValueLayout.JAVA_INT, 0, layout.lapack());
            uplo_.set(ValueLayout.JAVA_INT, 0, uplo.lapack());
            n_.set(ValueLayout.JAVA_INT, 0, n);
            nrhs_.set(ValueLayout.JAVA_INT, 0, nrhs);
            lda_.set(ValueLayout.JAVA_INT, 0, lda);
            ldb_.set(ValueLayout.JAVA_INT, 0, ldb);
            return dsysv_(layout_, uplo_, n_, nrhs_, A_, lda_, ipiv_, B_, ldb_);
        }
        return dsysv_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int sysv(Layout layout, UPLO uplo, int n, int nrhs, DoubleBuffer A, int lda, IntBuffer ipiv, DoubleBuffer B, int ldb) {
        return dsysv_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int sysv(Layout layout, UPLO uplo, int n, int nrhs, MemorySegment A, int lda, MemorySegment ipiv, MemorySegment B, int ldb) {
        return dsysv_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int sysv(Layout layout, UPLO uplo, int n, int nrhs, float[] A, int lda, int[] ipiv, float[] B, int ldb) {
        return ssysv_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int sysv(Layout layout, UPLO uplo, int n, int nrhs, FloatBuffer A, int lda, IntBuffer ipiv, FloatBuffer B, int ldb) {
        return ssysv_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int spsv(Layout layout, UPLO uplo, int n, int nrhs, double[] A, int[] ipiv, double[] B, int ldb) {
        return dspsv_(layout.lapack(), uplo.lapack(), n, nrhs, A, ipiv, B, ldb);
    }

    @Override
    public int spsv(Layout layout, UPLO uplo, int n, int nrhs, DoubleBuffer A, IntBuffer ipiv, DoubleBuffer B, int ldb) {
        return dspsv_(layout.lapack(), uplo.lapack(), n, nrhs, A, ipiv, B, ldb);
    }

    @Override
    public int spsv(Layout layout, UPLO uplo, int n, int nrhs, float[] A, int[] ipiv, float[] B, int ldb) {
        return sspsv_(layout.lapack(), uplo.lapack(), n, nrhs, A, ipiv, B, ldb);
    }

    @Override
    public int spsv(Layout layout, UPLO uplo, int n, int nrhs, FloatBuffer A, IntBuffer ipiv, FloatBuffer B, int ldb) {
        return sspsv_(layout.lapack(), uplo.lapack(), n, nrhs, A, ipiv, B, ldb);
    }

    @Override
    public int posv(Layout layout, UPLO uplo, int n, int nrhs, double[] A, int lda, double[] B, int ldb) {
        return dposv_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int posv(Layout layout, UPLO uplo, int n, int nrhs, DoubleBuffer A, int lda, DoubleBuffer B, int ldb) {
        return dposv_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int posv(Layout layout, UPLO uplo, int n, int nrhs, float[] A, int lda, float[] B, int ldb) {
        return sposv_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int posv(Layout layout, UPLO uplo, int n, int nrhs, FloatBuffer A, int lda, FloatBuffer B, int ldb) {
        return sposv_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int ppsv(Layout layout, UPLO uplo, int n, int nrhs, double[] A, double[] B, int ldb) {
        return dppsv_(layout.lapack(), uplo.lapack(), n, nrhs, A, B, ldb);
    }

    @Override
    public int ppsv(Layout layout, UPLO uplo, int n, int nrhs, DoubleBuffer A, DoubleBuffer B, int ldb) {
        return dppsv_(layout.lapack(), uplo.lapack(), n, nrhs, A, B, ldb);
    }

    @Override
    public int ppsv(Layout layout, UPLO uplo, int n, int nrhs, float[] A, float[] B, int ldb) {
        return sppsv_(layout.lapack(), uplo.lapack(), n, nrhs, A, B, ldb);
    }

    @Override
    public int ppsv(Layout layout, UPLO uplo, int n, int nrhs, FloatBuffer A, FloatBuffer B, int ldb) {
        return sppsv_(layout.lapack(), uplo.lapack(), n, nrhs, A, B, ldb);
    }

    @Override
    public int gbsv(Layout layout, int n, int kl, int ku, int nrhs, double[] A, int lda, int[] ipiv, double[] B, int ldb) {
        return dgbsv_(layout.lapack(), n, kl, ku, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int gbsv(Layout layout, int n, int kl, int ku, int nrhs, DoubleBuffer A, int lda, IntBuffer ipiv, DoubleBuffer B, int ldb) {
        return dgbsv_(layout.lapack(), n, kl, ku, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int gbsv(Layout layout, int n, int kl, int ku, int nrhs, float[] A, int lda, int[] ipiv, float[] B, int ldb) {
        return sgbsv_(layout.lapack(), n, kl, ku, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int gbsv(Layout layout, int n, int kl, int ku, int nrhs, FloatBuffer A, int lda, IntBuffer ipiv, FloatBuffer B, int ldb) {
        return sgbsv_(layout.lapack(), n, kl, ku, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int gels(Layout layout, Transpose trans, int m, int n, int nrhs, double[] A, int lda, double[] B, int ldb) {
        return dgels_(layout.lapack(), trans.lapack(), m, n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int gels(Layout layout, Transpose trans, int m, int n, int nrhs, DoubleBuffer A, int lda, DoubleBuffer B, int ldb) {
        return dgels_(layout.lapack(), trans.lapack(), m, n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int gels(Layout layout, Transpose trans, int m, int n, int nrhs, float[] A, int lda, float[] B, int ldb) {
        return sgels_(layout.lapack(), trans.lapack(), m, n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int gels(Layout layout, Transpose trans, int m, int n, int nrhs, FloatBuffer A, int lda, FloatBuffer B, int ldb) {
        return sgels_(layout.lapack(), trans.lapack(), m, n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int gelsy(Layout layout, int m, int n, int nrhs, double[] A, int lda, double[] B, int ldb, int[] jpvt, double rcond, int[] rank) {
        return dgelsy_(layout.lapack(), m, n, nrhs, A, lda, B, ldb, jpvt, rcond, rank);
    }

    @Override
    public int gelsy(Layout layout, int m, int n, int nrhs, DoubleBuffer A, int lda, DoubleBuffer B, int ldb, IntBuffer jpvt, double rcond, IntBuffer rank) {
        return dgelsy_(layout.lapack(), m, n, nrhs, A, lda, B, ldb, jpvt, rcond, rank);
    }

    @Override
    public int gelsy(Layout layout, int m, int n, int nrhs, float[] A, int lda, float[] B, int ldb, int[] jpvt, float rcond, int[] rank) {
        return sgelsy_(layout.lapack(), m, n, nrhs, A, lda, B, ldb, jpvt, rcond, rank);
    }

    @Override
    public int gelsy(Layout layout, int m, int n, int nrhs, FloatBuffer A, int lda, FloatBuffer B, int ldb, IntBuffer jpvt, float rcond, IntBuffer rank) {
        return sgelsy_(layout.lapack(), m, n, nrhs, A, lda, B, ldb, jpvt, rcond, rank);
    }

    @Override
    public int gelss(Layout layout, int m, int n, int nrhs, double[] A, int lda, double[] B, int ldb, double[] s, double rcond, int[] rank) {
        return dgelss_(layout.lapack(), m, n, nrhs, A, lda, B, ldb, s, rcond, rank);
    }

    @Override
    public int gelss(Layout layout, int m, int n, int nrhs, DoubleBuffer A, int lda, DoubleBuffer B, int ldb, DoubleBuffer s, double rcond, IntBuffer rank) {
        return dgelss_(layout.lapack(), m, n, nrhs, A, lda, B, ldb, s, rcond, rank);
    }

    @Override
    public int gelss(Layout layout, int m, int n, int nrhs, float[] A, int lda, float[] B, int ldb, float[] s, float rcond, int[] rank) {
        return sgelss_(layout.lapack(), m, n, nrhs, A, lda, B, ldb, s, rcond, rank);
    }

    @Override
    public int gelss(Layout layout, int m, int n, int nrhs, FloatBuffer A, int lda, FloatBuffer B, int ldb, FloatBuffer s, float rcond, IntBuffer rank) {
        return sgelss_(layout.lapack(), m, n, nrhs, A, lda, B, ldb, s, rcond, rank);
    }

    @Override
    public int gelsd(Layout layout, int m, int n, int nrhs, double[] A, int lda, double[] B, int ldb, double[] s, double rcond, int[] rank) {
        return dgelsd_(layout.lapack(), m, n, nrhs, A, lda, B, ldb, s, rcond, rank);
    }

    @Override
    public int gelsd(Layout layout, int m, int n, int nrhs, DoubleBuffer A, int lda, DoubleBuffer B, int ldb, DoubleBuffer s, double rcond, IntBuffer rank) {
        return dgelsd_(layout.lapack(), m, n, nrhs, A, lda, B, ldb, s, rcond, rank);
    }

    @Override
    public int gelsd(Layout layout, int m, int n, int nrhs, float[] A, int lda, float[] B, int ldb, float[] s, float rcond, int[] rank) {
        return sgelsd_(layout.lapack(), m, n, nrhs, A, lda, B, ldb, s, rcond, rank);
    }

    @Override
    public int gelsd(Layout layout, int m, int n, int nrhs, FloatBuffer A, int lda, FloatBuffer B, int ldb, FloatBuffer s, float rcond, IntBuffer rank) {
        return sgelsd_(layout.lapack(), m, n, nrhs, A, lda, B, ldb, s, rcond, rank);
    }

    @Override
    public int gglse(Layout layout, int m, int n, int p, double[] A, int lda, double[] B, int ldb, double[] c, double[] d, double[] x) {
        return dgglse_(layout.lapack(), m, n, p, A, lda, B, ldb, c, d, x);
    }

    @Override
    public int gglse(Layout layout, int m, int n, int p, DoubleBuffer A, int lda, DoubleBuffer B, int ldb, DoubleBuffer c, DoubleBuffer d, DoubleBuffer x) {
        return dgglse_(layout.lapack(), m, n, p, A, lda, B, ldb, c, d, x);
    }

    @Override
    public int gglse(Layout layout, int m, int n, int p, float[] A, int lda, float[] B, int ldb, float[] c, float[] d, float[] x) {
        return sgglse_(layout.lapack(), m, n, p, A, lda, B, ldb, c, d, x);
    }

    @Override
    public int gglse(Layout layout, int m, int n, int p, FloatBuffer A, int lda, FloatBuffer B, int ldb, FloatBuffer c, FloatBuffer d, FloatBuffer x) {
        return sgglse_(layout.lapack(), m, n, p, A, lda, B, ldb, c, d, x);
    }

    @Override
    public int ggglm(Layout layout, int n, int m, int p, double[] A, int lda, double[] B, int ldb, double[] d, double[] x, double[] y) {
        return dggglm_(layout.lapack(), n, m, p, A, lda, B, ldb, d, x, y);
    }

    @Override
    public int ggglm(Layout layout, int n, int m, int p, DoubleBuffer A, int lda, DoubleBuffer B, int ldb, DoubleBuffer d, DoubleBuffer x, DoubleBuffer y) {
        return dggglm_(layout.lapack(), n, m, p, A, lda, B, ldb, d, x, y);
    }

    @Override
    public int ggglm(Layout layout, int n, int m, int p, float[] A, int lda, float[] B, int ldb, float[] d, float[] x, float[] y) {
        return sggglm_(layout.lapack(), n, m, p, A, lda, B, ldb, d, x, y);
    }

    @Override
    public int ggglm(Layout layout, int n, int m, int p, FloatBuffer A, int lda, FloatBuffer B, int ldb, FloatBuffer d, FloatBuffer x, FloatBuffer y) {
        return sggglm_(layout.lapack(), n, m, p, A, lda, B, ldb, d, x, y);
    }

    @Override
    public int geev(Layout layout, EVDJob jobvl, EVDJob jobvr, int n, double[] A, int lda, double[] wr, double[] wi, double[] Vl, int ldvl, double[] Vr, int ldvr) {
        return dgeev_(layout.lapack(), jobvl.lapack(), jobvr.lapack(), n, A, lda, wr, wi, Vl, ldvl, Vr, ldvr);
    }

    @Override
    public int geev(Layout layout, EVDJob jobvl, EVDJob jobvr, int n, DoubleBuffer A, int lda, DoubleBuffer wr, DoubleBuffer wi, DoubleBuffer Vl, int ldvl, DoubleBuffer Vr, int ldvr) {
        return dgeev_(layout.lapack(), jobvl.lapack(), jobvr.lapack(), n, A, lda, wr, wi, Vl, ldvl, Vr, ldvr);
    }

    @Override
    public int geev(Layout layout, EVDJob jobvl, EVDJob jobvr, int n, MemorySegment A, int lda, MemorySegment wr, MemorySegment wi, MemorySegment Vl, int ldvl, MemorySegment Vr, int ldvr) {
        return dgeev_(layout.lapack(), jobvl.lapack(), jobvr.lapack(), n, A, lda, wr, wi, Vl, ldvl, Vr, ldvr);
    }

    @Override
    public int geev(Layout layout, EVDJob jobvl, EVDJob jobvr, int n, float[] A, int lda, float[] wr, float[] wi, float[] Vl, int ldvl, float[] Vr, int ldvr) {
        return sgeev_(layout.lapack(), jobvl.lapack(), jobvr.lapack(), n, A, lda, wr, wi, Vl, ldvl, Vr, ldvr);
    }

    @Override
    public int geev(Layout layout, EVDJob jobvl, EVDJob jobvr, int n, FloatBuffer A, int lda, FloatBuffer wr, FloatBuffer wi, FloatBuffer Vl, int ldvl, FloatBuffer Vr, int ldvr) {
        return sgeev_(layout.lapack(), jobvl.lapack(), jobvr.lapack(), n, A, lda, wr, wi, Vl, ldvl, Vr, ldvr);
    }

    @Override
    public int syev(Layout layout, EVDJob jobz, UPLO uplo, int n, double[] A, int lda, double[] w) {
        return dsyev_(layout.lapack(), jobz.lapack(), uplo.lapack(), n, A, lda, w);
    }

    @Override
    public int syev(Layout layout, EVDJob jobz, UPLO uplo, int n, DoubleBuffer A, int lda, DoubleBuffer w) {
        return dsyev_(layout.lapack(), jobz.lapack(), uplo.lapack(), n, A, lda, w);
    }

    @Override
    public int syev(Layout layout, EVDJob jobz, UPLO uplo, int n, float[] A, int lda, float[] w) {
        return ssyev_(layout.lapack(), jobz.lapack(), uplo.lapack(), n, A, lda, w);
    }

    @Override
    public int syev(Layout layout, EVDJob jobz, UPLO uplo, int n, FloatBuffer A, int lda, FloatBuffer w) {
        return ssyev_(layout.lapack(), jobz.lapack(), uplo.lapack(), n, A, lda, w);
    }

    @Override
    public int syevd(Layout layout, EVDJob jobz, UPLO uplo, int n, double[] A, int lda, double[] w) {
        return dsyevd_(layout.lapack(), jobz.lapack(), uplo.lapack(), n, A, lda, w);
    }

    @Override
    public int syevd(Layout layout, EVDJob jobz, UPLO uplo, int n, DoubleBuffer A, int lda, DoubleBuffer w) {
        return dsyevd_(layout.lapack(), jobz.lapack(), uplo.lapack(), n, A, lda, w);
    }

    @Override
    public int syevd(Layout layout, EVDJob jobz, UPLO uplo, int n, MemorySegment A, int lda, MemorySegment w) {
        return dsyevd_(layout.lapack(), jobz.lapack(), uplo.lapack(), n, A, lda, w);
    }

    @Override
    public int syevd(Layout layout, EVDJob jobz, UPLO uplo, int n, float[] A, int lda, float[] w) {
        return ssyevd_(layout.lapack(), jobz.lapack(), uplo.lapack(), n, A, lda, w);
    }

    @Override
    public int syevd(Layout layout, EVDJob jobz, UPLO uplo, int n, FloatBuffer A, int lda, FloatBuffer w) {
        return ssyevd_(layout.lapack(), jobz.lapack(), uplo.lapack(), n, A, lda, w);
    }

    @Override
    public int syevr(Layout layout, EVDJob jobz, EigenRange range, UPLO uplo, int n, double[] A, int lda, double vl, double vu, int il, int iu, double abstol, int[] m, double[] w, double[] Z, int ldz, int[] isuppz) {
        return dsyevr_(layout.lapack(), jobz.lapack(), range.lapack(), uplo.lapack(), n, A, lda, vl, vu, il, iu, abstol, m, w, Z, ldz, isuppz);
    }

    @Override
    public int syevr(Layout layout, EVDJob jobz, EigenRange range, UPLO uplo, int n, DoubleBuffer A, int lda, double vl, double vu, int il, int iu, double abstol, IntBuffer m, DoubleBuffer w, DoubleBuffer Z, int ldz, IntBuffer isuppz) {
        return dsyevr_(layout.lapack(), jobz.lapack(), range.lapack(), uplo.lapack(), n, A, lda, vl, vu, il, iu, abstol, m, w, Z, ldz, isuppz);
    }

    @Override
    public int syevr(Layout layout, EVDJob jobz, EigenRange range, UPLO uplo, int n, float[] A, int lda, float vl, float vu, int il, int iu, float abstol, int[] m, float[] w, float[] Z, int ldz, int[] isuppz) {
        return ssyevr_(layout.lapack(), jobz.lapack(), range.lapack(), uplo.lapack(), n, A, lda, vl, vu, il, iu, abstol, m, w, Z, ldz, isuppz);
    }

    @Override
    public int syevr(Layout layout, EVDJob jobz, EigenRange range, UPLO uplo, int n, FloatBuffer A, int lda, float vl, float vu, int il, int iu, float abstol, IntBuffer m, FloatBuffer w, FloatBuffer Z, int ldz, IntBuffer isuppz) {
        return ssyevr_(layout.lapack(), jobz.lapack(), range.lapack(), uplo.lapack(), n, A, lda, vl, vu, il, iu, abstol, m, w, Z, ldz, isuppz);
    }

    @Override
    public int gesvd(Layout layout, SVDJob jobu, SVDJob jobvt, int m, int n, double[] A, int lda, double[] s, double[] U, int ldu, double[] VT, int ldvt, double[] superb) {
        return dgesvd_(layout.lapack(), jobu.lapack(), jobvt.lapack(), m, n, A, lda, s, U, ldu, VT, ldvt, superb);
    }

    @Override
    public int gesvd(Layout layout, SVDJob jobu, SVDJob jobvt, int m, int n, DoubleBuffer A, int lda, DoubleBuffer s, DoubleBuffer U, int ldu, DoubleBuffer VT, int ldvt, DoubleBuffer superb) {
        return dgesvd_(layout.lapack(), jobu.lapack(), jobvt.lapack(), m, n, A, lda, s, U, ldu, VT, ldvt, superb);
    }

    @Override
    public int gesvd(Layout layout, SVDJob jobu, SVDJob jobvt, int m, int n, float[] A, int lda, float[] s, float[] U, int ldu, float[] VT, int ldvt, float[] superb) {
        return sgesvd_(layout.lapack(), jobu.lapack(), jobvt.lapack(), m, n, A, lda, s, U, ldu, VT, ldvt, superb);
    }

    @Override
    public int gesvd(Layout layout, SVDJob jobu, SVDJob jobvt, int m, int n, FloatBuffer A, int lda, FloatBuffer s, FloatBuffer U, int ldu, FloatBuffer VT, int ldvt, FloatBuffer superb) {
        return sgesvd_(layout.lapack(), jobu.lapack(), jobvt.lapack(), m, n, A, lda, s, U, ldu, VT, ldvt, superb);
    }

    @Override
    public int gesdd(Layout layout, SVDJob jobz, int m, int n, double[] A, int lda, double[] s, double[] U, int ldu, double[] VT, int ldvt) {
        return dgesdd_(layout.lapack(), jobz.lapack(), m, n, A, lda, s, U, ldu, VT, ldvt);
    }

    @Override
    public int gesdd(Layout layout, SVDJob jobz, int m, int n, DoubleBuffer A, int lda, DoubleBuffer s, DoubleBuffer U, int ldu, DoubleBuffer VT, int ldvt) {
        return dgesdd_(layout.lapack(), jobz.lapack(), m, n, A, lda, s, U, ldu, VT, ldvt);
    }

    @Override
    public int gesdd(Layout layout, SVDJob jobz, int m, int n, MemorySegment A, int lda, MemorySegment s, MemorySegment U, int ldu, MemorySegment VT, int ldvt) {
        return dgesdd_(layout.lapack(), jobz.lapack(), m, n, A, lda, s, U, ldu, VT, ldvt);
    }

    @Override
    public int gesdd(Layout layout, SVDJob jobz, int m, int n, float[] A, int lda, float[] s, float[] U, int ldu, float[] VT, int ldvt) {
        return sgesdd_(layout.lapack(), jobz.lapack(), m, n, A, lda, s, U, ldu, VT, ldvt);
    }

    @Override
    public int gesdd(Layout layout, SVDJob jobz, int m, int n, FloatBuffer A, int lda, FloatBuffer s, FloatBuffer U, int ldu, FloatBuffer VT, int ldvt) {
        return sgesdd_(layout.lapack(), jobz.lapack(), m, n, A, lda, s, U, ldu, VT, ldvt);
    }

    @Override
    public int getrf(Layout layout, int m, int n, double[] A, int lda, int[] ipiv) {
        return dgetrf_(layout.lapack(), m, n, A, lda, ipiv);
    }

    @Override
    public int getrf(Layout layout, int m, int n, DoubleBuffer A, int lda, IntBuffer ipiv) {
        return dgetrf_(layout.lapack(), m, n, A, lda, ipiv);
    }

    @Override
    public int getrf(Layout layout, int m, int n, MemorySegment A, int lda, MemorySegment ipiv) {
        return dgetrf_(layout.lapack(), m, n, A, lda, ipiv);
    }

    @Override
    public int getrf(Layout layout, int m, int n, float[] A, int lda, int[] ipiv) {
        return sgetrf_(layout.lapack(), m, n, A, lda, ipiv);
    }

    @Override
    public int getrf(Layout layout, int m, int n, FloatBuffer A, int lda, IntBuffer ipiv) {
        return sgetrf_(layout.lapack(), m, n, A, lda, ipiv);
    }

    @Override
    public int getrf2(Layout layout, int m, int n, double[] A, int lda, int[] ipiv) {
        return dgetrf2_(layout.lapack(), m, n, A, lda, ipiv);
    }

    @Override
    public int getrf2(Layout layout, int m, int n, DoubleBuffer A, int lda, IntBuffer ipiv) {
        return dgetrf2_(layout.lapack(), m, n, A, lda, ipiv);
    }

    @Override
    public int getrf2(Layout layout, int m, int n, float[] A, int lda, int[] ipiv) {
        return sgetrf2_(layout.lapack(), m, n, A, lda, ipiv);
    }

    @Override
    public int getrf2(Layout layout, int m, int n, FloatBuffer A, int lda, IntBuffer ipiv) {
        return sgetrf2_(layout.lapack(), m, n, A, lda, ipiv);
    }

    @Override
    public int gbtrf(Layout layout, int m, int n, int kl, int ku, double[] AB, int ldab, int[] ipiv) {
        return dgbtrf_(layout.lapack(), m, n, kl, ku, AB, ldab, ipiv);
    }

    @Override
    public int gbtrf(Layout layout, int m, int n, int kl, int ku, DoubleBuffer AB, int ldab, IntBuffer ipiv) {
        return dgbtrf_(layout.lapack(), m, n, kl, ku, AB, ldab, ipiv);
    }

    @Override
    public int gbtrf(Layout layout, int m, int n, int kl, int ku, float[] AB, int ldab, int[] ipiv) {
        return sgbtrf_(layout.lapack(), m, n, kl, ku, AB, ldab, ipiv);
    }

    @Override
    public int gbtrf(Layout layout, int m, int n, int kl, int ku, FloatBuffer AB, int ldab, IntBuffer ipiv) {
        return sgbtrf_(layout.lapack(), m, n, kl, ku, AB, ldab, ipiv);
    }

    @Override
    public int sptrf(Layout layout, UPLO uplo, int n, double[] AP, int[] ipiv) {
        return dsptrf_(layout.lapack(), uplo.lapack(), n, AP, ipiv);
    }

    @Override
    public int sptrf(Layout layout, UPLO uplo, int n, DoubleBuffer AP, IntBuffer ipiv) {
        return dsptrf_(layout.lapack(), uplo.lapack(), n, AP, ipiv);
    }

    @Override
    public int sptrf(Layout layout, UPLO uplo, int n, float[] AP, int[] ipiv) {
        return ssptrf_(layout.lapack(), uplo.lapack(), n, AP, ipiv);
    }

    @Override
    public int sptrf(Layout layout, UPLO uplo, int n, FloatBuffer AP, IntBuffer ipiv) {
        return ssptrf_(layout.lapack(), uplo.lapack(), n, AP, ipiv);
    }

    @Override
    public int getrs(Layout layout, Transpose trans, int n, int nrhs, double[] A, int lda, int[] ipiv, double[] B, int ldb) {
        return dgetrs_(layout.lapack(), trans.lapack(), n, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int getrs(Layout layout, Transpose trans, int n, int nrhs, DoubleBuffer A, int lda, IntBuffer ipiv, DoubleBuffer B, int ldb) {
        return dgetrs_(layout.lapack(), trans.lapack(), n, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int getrs(Layout layout, Transpose trans, int n, int nrhs, MemorySegment A, int lda, MemorySegment ipiv, MemorySegment B, int ldb) {
        return dgetrs_(layout.lapack(), trans.lapack(), n, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int getrs(Layout layout, Transpose trans, int n, int nrhs, float[] A, int lda, int[] ipiv, float[] B, int ldb) {
        return sgetrs_(layout.lapack(), trans.lapack(), n, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int getrs(Layout layout, Transpose trans, int n, int nrhs, FloatBuffer A, int lda, IntBuffer ipiv, FloatBuffer B, int ldb) {
        return sgetrs_(layout.lapack(), trans.lapack(), n, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int gbtrs(Layout layout, Transpose trans, int n, int kl, int ku, int nrhs, double[] A, int lda, int[] ipiv, double[] B, int ldb) {
        return dgbtrs_(layout.lapack(), trans.lapack(), n, kl, ku, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int gbtrs(Layout layout, Transpose trans, int n, int kl, int ku, int nrhs, DoubleBuffer A, int lda, IntBuffer ipiv, DoubleBuffer B, int ldb) {
        return dgbtrs_(layout.lapack(), trans.lapack(), n, kl, ku, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int gbtrs(Layout layout, Transpose trans, int n, int kl, int ku, int nrhs, float[] A, int lda, int[] ipiv, float[] B, int ldb) {
        return sgbtrs_(layout.lapack(), trans.lapack(), n, kl, ku, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int gbtrs(Layout layout, Transpose trans, int n, int kl, int ku, int nrhs, FloatBuffer A, int lda, IntBuffer ipiv, FloatBuffer B, int ldb) {
        return sgbtrs_(layout.lapack(), trans.lapack(), n, kl, ku, nrhs, A, lda, ipiv, B, ldb);
    }

    @Override
    public int sptrs(Layout layout, UPLO uplo, int n, int nrhs, double[] AP, int[] ipiv, double[] B, int ldb) {
        return dsptrs_(layout.lapack(), uplo.lapack(), n, nrhs, AP, ipiv, B, ldb);
    }

    @Override
    public int sptrs(Layout layout, UPLO uplo, int n, int nrhs, DoubleBuffer AP, IntBuffer ipiv, DoubleBuffer B, int ldb) {
        return dsptrs_(layout.lapack(), uplo.lapack(), n, nrhs, AP, ipiv, B, ldb);
    }

    @Override
    public int sptrs(Layout layout, UPLO uplo, int n, int nrhs, float[] AP, int[] ipiv, float[] B, int ldb) {
        return ssptrs_(layout.lapack(), uplo.lapack(), n, nrhs, AP, ipiv, B, ldb);
    }

    @Override
    public int sptrs(Layout layout, UPLO uplo, int n, int nrhs, FloatBuffer AP, IntBuffer ipiv, FloatBuffer B, int ldb) {
        return ssptrs_(layout.lapack(), uplo.lapack(), n, nrhs, AP, ipiv, B, ldb);
    }

    @Override
    public int potrf(Layout layout, UPLO uplo, int n, double[] A, int lda) {
        return dpotrf_(layout.lapack(), uplo.lapack(), n, A, lda);
    }

    @Override
    public int potrf(Layout layout, UPLO uplo, int n, DoubleBuffer A, int lda) {
        return dpotrf_(layout.lapack(), uplo.lapack(), n, A, lda);
    }

    @Override
    public int potrf(Layout layout, UPLO uplo, int n, MemorySegment A, int lda) {
        return dpotrf_(layout.lapack(), uplo.lapack(), n, A, lda);
    }

    @Override
    public int potrf(Layout layout, UPLO uplo, int n, float[] A, int lda) {
        return spotrf_(layout.lapack(), uplo.lapack(), n, A, lda);
    }

    @Override
    public int potrf(Layout layout, UPLO uplo, int n, FloatBuffer A, int lda) {
        return spotrf_(layout.lapack(), uplo.lapack(), n, A, lda);
    }

    @Override
    public int potrf2(Layout layout, UPLO uplo, int n, double[] A, int lda) {
        return dpotrf2_(layout.lapack(), uplo.lapack(), n, A, lda);
    }

    @Override
    public int potrf2(Layout layout, UPLO uplo, int n, DoubleBuffer A, int lda) {
        return dpotrf2_(layout.lapack(), uplo.lapack(), n, A, lda);
    }

    @Override
    public int potrf2(Layout layout, UPLO uplo, int n, float[] A, int lda) {
        return spotrf2_(layout.lapack(), uplo.lapack(), n, A, lda);
    }

    @Override
    public int potrf2(Layout layout, UPLO uplo, int n, FloatBuffer A, int lda) {
        return spotrf2_(layout.lapack(), uplo.lapack(), n, A, lda);
    }

    @Override
    public int pbtrf(Layout layout, UPLO uplo, int n, int kd, double[] AB, int ldab) {
        return dpbtrf_(layout.lapack(), uplo.lapack(), n, kd, AB, ldab);
    }

    @Override
    public int pbtrf(Layout layout, UPLO uplo, int n, int kd, DoubleBuffer AB, int ldab) {
        return dpbtrf_(layout.lapack(), uplo.lapack(), n, kd, AB, ldab);
    }

    @Override
    public int pbtrf(Layout layout, UPLO uplo, int n, int kd, float[] AB, int ldab) {
        return spbtrf_(layout.lapack(), uplo.lapack(), n, kd, AB, ldab);
    }

    @Override
    public int pbtrf(Layout layout, UPLO uplo, int n, int kd, FloatBuffer AB, int ldab) {
        return spbtrf_(layout.lapack(), uplo.lapack(), n, kd, AB, ldab);
    }

    @Override
    public int pptrf(Layout layout, UPLO uplo, int n, double[] AP) {
        return dpptrf_(layout.lapack(), uplo.lapack(), n, AP);
    }

    @Override
    public int pptrf(Layout layout, UPLO uplo, int n, DoubleBuffer AP) {
        return dpptrf_(layout.lapack(), uplo.lapack(), n, AP);
    }

    @Override
    public int pptrf(Layout layout, UPLO uplo, int n, float[] AP) {
        return spptrf_(layout.lapack(), uplo.lapack(), n, AP);
    }

    @Override
    public int pptrf(Layout layout, UPLO uplo, int n, FloatBuffer AP) {
        return spptrf_(layout.lapack(), uplo.lapack(), n, AP);
    }

    @Override
    public int potrs(Layout layout, UPLO uplo, int n, int nrhs, double[] A, int lda, double[] B, int ldb) {
        return dpotrs_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int potrs(Layout layout, UPLO uplo, int n, int nrhs, DoubleBuffer A, int lda, DoubleBuffer B, int ldb) {
        return dpotrs_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int potrs(Layout layout, UPLO uplo, int n, int nrhs, MemorySegment A, int lda, MemorySegment B, int ldb) {
        return dpotrs_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int potrs(Layout layout, UPLO uplo, int n, int nrhs, float[] A, int lda, float[] B, int ldb) {
        return spotrs_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int potrs(Layout layout, UPLO uplo, int n, int nrhs, FloatBuffer A, int lda, FloatBuffer B, int ldb) {
        return spotrs_(layout.lapack(), uplo.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int pbtrs(Layout layout, UPLO uplo, int n, int kd, int nrhs, double[] AB, int ldab, double[] B, int ldb) {
        return dpbtrs_(layout.lapack(), uplo.lapack(), n, kd, nrhs, AB, ldab, B, ldb);
    }

    @Override
    public int pbtrs(Layout layout, UPLO uplo, int n, int kd, int nrhs, DoubleBuffer AB, int ldab, DoubleBuffer B, int ldb) {
        return dpbtrs_(layout.lapack(), uplo.lapack(), n, kd, nrhs, AB, ldab, B, ldb);
    }

    @Override
    public int pbtrs(Layout layout, UPLO uplo, int n, int kd, int nrhs, float[] AB, int ldab, float[] B, int ldb) {
        return spbtrs_(layout.lapack(), uplo.lapack(), n, kd, nrhs, AB, ldab, B, ldb);
    }

    @Override
    public int pbtrs(Layout layout, UPLO uplo, int n, int kd, int nrhs, FloatBuffer AB, int ldab, FloatBuffer B, int ldb) {
        return spbtrs_(layout.lapack(), uplo.lapack(), n, kd, nrhs, AB, ldab, B, ldb);
    }

    @Override
    public int pptrs(Layout layout, UPLO uplo, int n, int nrhs, double[] AP, double[] B, int ldb) {
        return dpptrs_(layout.lapack(), uplo.lapack(), n, nrhs, AP, B, ldb);
    }

    @Override
    public int pptrs(Layout layout, UPLO uplo, int n, int nrhs, DoubleBuffer AP, DoubleBuffer B, int ldb) {
        return dpptrs_(layout.lapack(), uplo.lapack(), n, nrhs, AP, B, ldb);
    }

    @Override
    public int pptrs(Layout layout, UPLO uplo, int n, int nrhs, float[] AP, float[] B, int ldb) {
        return spptrs_(layout.lapack(), uplo.lapack(), n, nrhs, AP, B, ldb);
    }

    @Override
    public int pptrs(Layout layout, UPLO uplo, int n, int nrhs, FloatBuffer AP, FloatBuffer B, int ldb) {
        return spptrs_(layout.lapack(), uplo.lapack(), n, nrhs, AP, B, ldb);
    }

    @Override
    public int geqrf(Layout layout, int m, int n, double[] A, int lda, double[] tau) {
        return dgeqrf_(layout.lapack(), m, n, A, lda, tau);
    }

    @Override
    public int geqrf(Layout layout, int m, int n, DoubleBuffer A, int lda, DoubleBuffer tau) {
        return dgeqrf_(layout.lapack(), m, n, A, lda, tau);
    }

    @Override
    public int geqrf(Layout layout, int m, int n, MemorySegment A, int lda, MemorySegment tau) {
        return dgeqrf_(layout.lapack(), m, n, A, lda, tau);
    }

    @Override
    public int geqrf(Layout layout, int m, int n, float[] A, int lda, float[] tau) {
        return sgeqrf_(layout.lapack(), m, n, A, lda, tau);
    }

    @Override
    public int geqrf(Layout layout, int m, int n, FloatBuffer A, int lda, FloatBuffer tau) {
        return sgeqrf_(layout.lapack(), m, n, A, lda, tau);
    }

    @Override
    public int orgqr(Layout layout, int m, int n, int k, double[] A, int lda, double[] tau) {
        return dorgqr_(layout.lapack(), m, n, k, A, lda, tau);
    }

    @Override
    public int orgqr(Layout layout, int m, int n, int k, DoubleBuffer A, int lda, DoubleBuffer tau) {
        return dorgqr_(layout.lapack(), m, n, k, A, lda, tau);
    }

    @Override
    public int orgqr(Layout layout, int m, int n, int k, MemorySegment A, int lda, MemorySegment tau) {
        return dorgqr_(layout.lapack(), m, n, k, A, lda, tau);
    }

    @Override
    public int orgqr(Layout layout, int m, int n, int k, float[] A, int lda, float[] tau) {
        return sorgqr_(layout.lapack(), m, n, k, A, lda, tau);
    }

    @Override
    public int orgqr(Layout layout, int m, int n, int k, FloatBuffer A, int lda, FloatBuffer tau) {
        return sorgqr_(layout.lapack(), m, n, k, A, lda, tau);
    }

    @Override
    public int ormqr(Layout layout, Side side, Transpose trans, int m, int n, int k, double[] A, int lda, double[] tau, double[] C, int ldc) {
        return dormqr_(layout.lapack(), side.lapack(), trans.lapack(), m, n, k, A, lda, tau, C, ldc);
    }

    @Override
    public int ormqr(Layout layout, Side side, Transpose trans, int m, int n, int k, DoubleBuffer A, int lda, DoubleBuffer tau, DoubleBuffer C, int ldc) {
        return dormqr_(layout.lapack(), side.lapack(), trans.lapack(), m, n, k, A, lda, tau, C, ldc);
    }

    @Override
    public int ormqr(Layout layout, Side side, Transpose trans, int m, int n, int k, MemorySegment A, int lda, MemorySegment tau, MemorySegment C, int ldc) {
        return dormqr_(layout.lapack(), side.lapack(), trans.lapack(), m, n, k, A, lda, tau, C, ldc);
    }

    @Override
    public int ormqr(Layout layout, Side side, Transpose trans, int m, int n, int k, float[] A, int lda, float[] tau, float[] C, int ldc) {
        return sormqr_(layout.lapack(), side.lapack(), trans.lapack(), m, n, k, A, lda, tau, C, ldc);
    }

    @Override
    public int ormqr(Layout layout, Side side, Transpose trans, int m, int n, int k, FloatBuffer A, int lda, FloatBuffer tau, FloatBuffer C, int ldc) {
        return sormqr_(layout.lapack(), side.lapack(), trans.lapack(), m, n, k, A, lda, tau, C, ldc);
    }

    @Override
    public int trtrs(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, int nrhs, double[] A, int lda, double[] B, int ldb) {
        return dtrtrs_(layout.lapack(), uplo.lapack(), trans.lapack(), diag.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int trtrs(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, int nrhs, DoubleBuffer A, int lda, DoubleBuffer B, int ldb) {
        return dtrtrs_(layout.lapack(), uplo.lapack(), trans.lapack(), diag.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int trtrs(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, int nrhs, MemorySegment A, int lda, MemorySegment B, int ldb) {
        return dtrtrs_(layout.lapack(), uplo.lapack(), trans.lapack(), diag.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int trtrs(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, int nrhs, float[] A, int lda, float[] B, int ldb) {
        return strtrs_(layout.lapack(), uplo.lapack(), trans.lapack(), diag.lapack(), n, nrhs, A, lda, B, ldb);
    }

    @Override
    public int trtrs(Layout layout, UPLO uplo, Transpose trans, Diag diag, int n, int nrhs, FloatBuffer A, int lda, FloatBuffer B, int ldb) {
        return strtrs_(layout.lapack(), uplo.lapack(), trans.lapack(), diag.lapack(), n, nrhs, A, lda, B, ldb);
    }
}
