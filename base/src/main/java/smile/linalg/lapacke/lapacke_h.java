// Generated by jextract

package smile.linalg.lapack;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class lapacke_h extends lapacke_h_1 {

    lapacke_h() {
        // Should not be called directly
    }

    private static class LAPACKE_dsytrs_aa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsytrs_aa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const int *ipiv, double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsytrs_aa$descriptor() {
        return LAPACKE_dsytrs_aa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const int *ipiv, double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_dsytrs_aa$handle() {
        return LAPACKE_dsytrs_aa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const int *ipiv, double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_dsytrs_aa$address() {
        return LAPACKE_dsytrs_aa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const int *ipiv, double *b, int ldb)
     * }
     */
    public static int LAPACKE_dsytrs_aa(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_dsytrs_aa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsytrs_aa", matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsytrs_aa_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsytrs_aa_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const int *ipiv, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsytrs_aa_work$descriptor() {
        return LAPACKE_dsytrs_aa_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const int *ipiv, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dsytrs_aa_work$handle() {
        return LAPACKE_dsytrs_aa_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const int *ipiv, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dsytrs_aa_work$address() {
        return LAPACKE_dsytrs_aa_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const int *ipiv, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dsytrs_aa_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment ipiv, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dsytrs_aa_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsytrs_aa_work", matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssytrs_aa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssytrs_aa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const int *ipiv, float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssytrs_aa$descriptor() {
        return LAPACKE_ssytrs_aa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const int *ipiv, float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_ssytrs_aa$handle() {
        return LAPACKE_ssytrs_aa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const int *ipiv, float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_ssytrs_aa$address() {
        return LAPACKE_ssytrs_aa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const int *ipiv, float *b, int ldb)
     * }
     */
    public static int LAPACKE_ssytrs_aa(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_ssytrs_aa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssytrs_aa", matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssytrs_aa_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssytrs_aa_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const int *ipiv, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssytrs_aa_work$descriptor() {
        return LAPACKE_ssytrs_aa_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const int *ipiv, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_ssytrs_aa_work$handle() {
        return LAPACKE_ssytrs_aa_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const int *ipiv, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_ssytrs_aa_work$address() {
        return LAPACKE_ssytrs_aa_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const int *ipiv, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static int LAPACKE_ssytrs_aa_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment ipiv, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_ssytrs_aa_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssytrs_aa_work", matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsytrs_aa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsytrs_aa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsytrs_aa$descriptor() {
        return LAPACKE_zsytrs_aa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zsytrs_aa$handle() {
        return LAPACKE_zsytrs_aa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zsytrs_aa$address() {
        return LAPACKE_zsytrs_aa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zsytrs_aa(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zsytrs_aa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsytrs_aa", matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsytrs_aa_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsytrs_aa_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsytrs_aa_work$descriptor() {
        return LAPACKE_zsytrs_aa_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zsytrs_aa_work$handle() {
        return LAPACKE_zsytrs_aa_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zsytrs_aa_work$address() {
        return LAPACKE_zsytrs_aa_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zsytrs_aa_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment ipiv, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zsytrs_aa_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsytrs_aa_work", matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhetrs_aa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhetrs_aa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhetrs_aa$descriptor() {
        return LAPACKE_zhetrs_aa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zhetrs_aa$handle() {
        return LAPACKE_zhetrs_aa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zhetrs_aa$address() {
        return LAPACKE_zhetrs_aa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zhetrs_aa(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zhetrs_aa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhetrs_aa", matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhetrs_aa_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhetrs_aa_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhetrs_aa_work$descriptor() {
        return LAPACKE_zhetrs_aa_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zhetrs_aa_work$handle() {
        return LAPACKE_zhetrs_aa_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zhetrs_aa_work$address() {
        return LAPACKE_zhetrs_aa_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zhetrs_aa_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment ipiv, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zhetrs_aa_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhetrs_aa_work", matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssysv_rk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssysv_rk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssysv_rk(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *e, int *ipiv, float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssysv_rk$descriptor() {
        return LAPACKE_ssysv_rk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssysv_rk(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *e, int *ipiv, float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_ssysv_rk$handle() {
        return LAPACKE_ssysv_rk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssysv_rk(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *e, int *ipiv, float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_ssysv_rk$address() {
        return LAPACKE_ssysv_rk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssysv_rk(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *e, int *ipiv, float *b, int ldb)
     * }
     */
    public static int LAPACKE_ssysv_rk(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_ssysv_rk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssysv_rk", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssysv_rk_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssysv_rk_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *e, int *ipiv, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssysv_rk_work$descriptor() {
        return LAPACKE_ssysv_rk_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *e, int *ipiv, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_ssysv_rk_work$handle() {
        return LAPACKE_ssysv_rk_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *e, int *ipiv, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_ssysv_rk_work$address() {
        return LAPACKE_ssysv_rk_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *e, int *ipiv, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static int LAPACKE_ssysv_rk_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_ssysv_rk_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssysv_rk_work", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsysv_rk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsysv_rk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsysv_rk(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *e, int *ipiv, double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsysv_rk$descriptor() {
        return LAPACKE_dsysv_rk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsysv_rk(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *e, int *ipiv, double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_dsysv_rk$handle() {
        return LAPACKE_dsysv_rk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsysv_rk(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *e, int *ipiv, double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_dsysv_rk$address() {
        return LAPACKE_dsysv_rk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsysv_rk(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *e, int *ipiv, double *b, int ldb)
     * }
     */
    public static int LAPACKE_dsysv_rk(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_dsysv_rk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsysv_rk", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsysv_rk_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsysv_rk_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *e, int *ipiv, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsysv_rk_work$descriptor() {
        return LAPACKE_dsysv_rk_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *e, int *ipiv, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dsysv_rk_work$handle() {
        return LAPACKE_dsysv_rk_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *e, int *ipiv, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dsysv_rk_work$address() {
        return LAPACKE_dsysv_rk_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *e, int *ipiv, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dsysv_rk_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dsysv_rk_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsysv_rk_work", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csysv_rk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csysv_rk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csysv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_csysv_rk$descriptor() {
        return LAPACKE_csysv_rk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csysv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_csysv_rk$handle() {
        return LAPACKE_csysv_rk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csysv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_csysv_rk$address() {
        return LAPACKE_csysv_rk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csysv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_csysv_rk(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_csysv_rk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csysv_rk", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csysv_rk_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csysv_rk_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_csysv_rk_work$descriptor() {
        return LAPACKE_csysv_rk_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_csysv_rk_work$handle() {
        return LAPACKE_csysv_rk_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_csysv_rk_work$address() {
        return LAPACKE_csysv_rk_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_csysv_rk_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_csysv_rk_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csysv_rk_work", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsysv_rk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsysv_rk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsysv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsysv_rk$descriptor() {
        return LAPACKE_zsysv_rk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsysv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zsysv_rk$handle() {
        return LAPACKE_zsysv_rk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsysv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zsysv_rk$address() {
        return LAPACKE_zsysv_rk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsysv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zsysv_rk(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zsysv_rk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsysv_rk", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsysv_rk_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsysv_rk_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsysv_rk_work$descriptor() {
        return LAPACKE_zsysv_rk_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zsysv_rk_work$handle() {
        return LAPACKE_zsysv_rk_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zsysv_rk_work$address() {
        return LAPACKE_zsysv_rk_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsysv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zsysv_rk_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zsysv_rk_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsysv_rk_work", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chesv_rk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chesv_rk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chesv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_chesv_rk$descriptor() {
        return LAPACKE_chesv_rk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chesv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_chesv_rk$handle() {
        return LAPACKE_chesv_rk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chesv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_chesv_rk$address() {
        return LAPACKE_chesv_rk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chesv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_chesv_rk(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_chesv_rk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chesv_rk", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chesv_rk_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chesv_rk_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chesv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_chesv_rk_work$descriptor() {
        return LAPACKE_chesv_rk_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chesv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_chesv_rk_work$handle() {
        return LAPACKE_chesv_rk_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chesv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_chesv_rk_work$address() {
        return LAPACKE_chesv_rk_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chesv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_chesv_rk_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_chesv_rk_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chesv_rk_work", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhesv_rk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhesv_rk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhesv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhesv_rk$descriptor() {
        return LAPACKE_zhesv_rk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhesv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zhesv_rk$handle() {
        return LAPACKE_zhesv_rk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhesv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zhesv_rk$address() {
        return LAPACKE_zhesv_rk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhesv_rk(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zhesv_rk(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zhesv_rk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhesv_rk", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhesv_rk_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhesv_rk_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhesv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhesv_rk_work$descriptor() {
        return LAPACKE_zhesv_rk_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhesv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zhesv_rk_work$handle() {
        return LAPACKE_zhesv_rk_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhesv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zhesv_rk_work$address() {
        return LAPACKE_zhesv_rk_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhesv_rk_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zhesv_rk_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zhesv_rk_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhesv_rk_work", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssytrf_rk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssytrf_rk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_rk(int matrix_layout, char uplo, int n, float *a, int lda, float *e, int *ipiv)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssytrf_rk$descriptor() {
        return LAPACKE_ssytrf_rk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_rk(int matrix_layout, char uplo, int n, float *a, int lda, float *e, int *ipiv)
     * }
     */
    public static MethodHandle LAPACKE_ssytrf_rk$handle() {
        return LAPACKE_ssytrf_rk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_rk(int matrix_layout, char uplo, int n, float *a, int lda, float *e, int *ipiv)
     * }
     */
    public static MemorySegment LAPACKE_ssytrf_rk$address() {
        return LAPACKE_ssytrf_rk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_rk(int matrix_layout, char uplo, int n, float *a, int lda, float *e, int *ipiv)
     * }
     */
    public static int LAPACKE_ssytrf_rk(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv) {
        var mh$ = LAPACKE_ssytrf_rk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssytrf_rk", matrix_layout, uplo, n, a, lda, e, ipiv);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsytrf_rk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsytrf_rk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_rk(int matrix_layout, char uplo, int n, double *a, int lda, double *e, int *ipiv)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsytrf_rk$descriptor() {
        return LAPACKE_dsytrf_rk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_rk(int matrix_layout, char uplo, int n, double *a, int lda, double *e, int *ipiv)
     * }
     */
    public static MethodHandle LAPACKE_dsytrf_rk$handle() {
        return LAPACKE_dsytrf_rk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_rk(int matrix_layout, char uplo, int n, double *a, int lda, double *e, int *ipiv)
     * }
     */
    public static MemorySegment LAPACKE_dsytrf_rk$address() {
        return LAPACKE_dsytrf_rk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_rk(int matrix_layout, char uplo, int n, double *a, int lda, double *e, int *ipiv)
     * }
     */
    public static int LAPACKE_dsytrf_rk(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv) {
        var mh$ = LAPACKE_dsytrf_rk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsytrf_rk", matrix_layout, uplo, n, a, lda, e, ipiv);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csytrf_rk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csytrf_rk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csytrf_rk(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv)
     * }
     */
    public static FunctionDescriptor LAPACKE_csytrf_rk$descriptor() {
        return LAPACKE_csytrf_rk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csytrf_rk(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv)
     * }
     */
    public static MethodHandle LAPACKE_csytrf_rk$handle() {
        return LAPACKE_csytrf_rk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csytrf_rk(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv)
     * }
     */
    public static MemorySegment LAPACKE_csytrf_rk$address() {
        return LAPACKE_csytrf_rk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csytrf_rk(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv)
     * }
     */
    public static int LAPACKE_csytrf_rk(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv) {
        var mh$ = LAPACKE_csytrf_rk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csytrf_rk", matrix_layout, uplo, n, a, lda, e, ipiv);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsytrf_rk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsytrf_rk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_rk(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsytrf_rk$descriptor() {
        return LAPACKE_zsytrf_rk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_rk(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv)
     * }
     */
    public static MethodHandle LAPACKE_zsytrf_rk$handle() {
        return LAPACKE_zsytrf_rk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_rk(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv)
     * }
     */
    public static MemorySegment LAPACKE_zsytrf_rk$address() {
        return LAPACKE_zsytrf_rk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_rk(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv)
     * }
     */
    public static int LAPACKE_zsytrf_rk(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv) {
        var mh$ = LAPACKE_zsytrf_rk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsytrf_rk", matrix_layout, uplo, n, a, lda, e, ipiv);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chetrf_rk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chetrf_rk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chetrf_rk(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv)
     * }
     */
    public static FunctionDescriptor LAPACKE_chetrf_rk$descriptor() {
        return LAPACKE_chetrf_rk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chetrf_rk(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv)
     * }
     */
    public static MethodHandle LAPACKE_chetrf_rk$handle() {
        return LAPACKE_chetrf_rk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chetrf_rk(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv)
     * }
     */
    public static MemorySegment LAPACKE_chetrf_rk$address() {
        return LAPACKE_chetrf_rk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chetrf_rk(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv)
     * }
     */
    public static int LAPACKE_chetrf_rk(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv) {
        var mh$ = LAPACKE_chetrf_rk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chetrf_rk", matrix_layout, uplo, n, a, lda, e, ipiv);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhetrf_rk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhetrf_rk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_rk(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhetrf_rk$descriptor() {
        return LAPACKE_zhetrf_rk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_rk(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv)
     * }
     */
    public static MethodHandle LAPACKE_zhetrf_rk$handle() {
        return LAPACKE_zhetrf_rk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_rk(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv)
     * }
     */
    public static MemorySegment LAPACKE_zhetrf_rk$address() {
        return LAPACKE_zhetrf_rk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_rk(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv)
     * }
     */
    public static int LAPACKE_zhetrf_rk(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv) {
        var mh$ = LAPACKE_zhetrf_rk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhetrf_rk", matrix_layout, uplo, n, a, lda, e, ipiv);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssytrf_rk_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssytrf_rk_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_rk_work(int matrix_layout, char uplo, int n, float *a, int lda, float *e, int *ipiv, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssytrf_rk_work$descriptor() {
        return LAPACKE_ssytrf_rk_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_rk_work(int matrix_layout, char uplo, int n, float *a, int lda, float *e, int *ipiv, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_ssytrf_rk_work$handle() {
        return LAPACKE_ssytrf_rk_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_rk_work(int matrix_layout, char uplo, int n, float *a, int lda, float *e, int *ipiv, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_ssytrf_rk_work$address() {
        return LAPACKE_ssytrf_rk_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_rk_work(int matrix_layout, char uplo, int n, float *a, int lda, float *e, int *ipiv, float *work, int lwork)
     * }
     */
    public static int LAPACKE_ssytrf_rk_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_ssytrf_rk_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssytrf_rk_work", matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsytrf_rk_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsytrf_rk_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_rk_work(int matrix_layout, char uplo, int n, double *a, int lda, double *e, int *ipiv, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsytrf_rk_work$descriptor() {
        return LAPACKE_dsytrf_rk_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_rk_work(int matrix_layout, char uplo, int n, double *a, int lda, double *e, int *ipiv, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dsytrf_rk_work$handle() {
        return LAPACKE_dsytrf_rk_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_rk_work(int matrix_layout, char uplo, int n, double *a, int lda, double *e, int *ipiv, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dsytrf_rk_work$address() {
        return LAPACKE_dsytrf_rk_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_rk_work(int matrix_layout, char uplo, int n, double *a, int lda, double *e, int *ipiv, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dsytrf_rk_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dsytrf_rk_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsytrf_rk_work", matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csytrf_rk_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csytrf_rk_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csytrf_rk_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_csytrf_rk_work$descriptor() {
        return LAPACKE_csytrf_rk_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csytrf_rk_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_csytrf_rk_work$handle() {
        return LAPACKE_csytrf_rk_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csytrf_rk_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_csytrf_rk_work$address() {
        return LAPACKE_csytrf_rk_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csytrf_rk_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_csytrf_rk_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_csytrf_rk_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csytrf_rk_work", matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsytrf_rk_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsytrf_rk_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_rk_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsytrf_rk_work$descriptor() {
        return LAPACKE_zsytrf_rk_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_rk_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zsytrf_rk_work$handle() {
        return LAPACKE_zsytrf_rk_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_rk_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zsytrf_rk_work$address() {
        return LAPACKE_zsytrf_rk_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_rk_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zsytrf_rk_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zsytrf_rk_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsytrf_rk_work", matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chetrf_rk_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chetrf_rk_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chetrf_rk_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_chetrf_rk_work$descriptor() {
        return LAPACKE_chetrf_rk_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chetrf_rk_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_chetrf_rk_work$handle() {
        return LAPACKE_chetrf_rk_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chetrf_rk_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_chetrf_rk_work$address() {
        return LAPACKE_chetrf_rk_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chetrf_rk_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *e, int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_chetrf_rk_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_chetrf_rk_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chetrf_rk_work", matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhetrf_rk_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhetrf_rk_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_rk_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhetrf_rk_work$descriptor() {
        return LAPACKE_zhetrf_rk_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_rk_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zhetrf_rk_work$handle() {
        return LAPACKE_zhetrf_rk_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_rk_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zhetrf_rk_work$address() {
        return LAPACKE_zhetrf_rk_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_rk_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *e, int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zhetrf_rk_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zhetrf_rk_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhetrf_rk_work", matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csytrs_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csytrs_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csytrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_csytrs_3$descriptor() {
        return LAPACKE_csytrs_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csytrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_csytrs_3$handle() {
        return LAPACKE_csytrs_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csytrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_csytrs_3$address() {
        return LAPACKE_csytrs_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csytrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_csytrs_3(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_csytrs_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csytrs_3", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csytrs_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csytrs_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_csytrs_3_work$descriptor() {
        return LAPACKE_csytrs_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_csytrs_3_work$handle() {
        return LAPACKE_csytrs_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_csytrs_3_work$address() {
        return LAPACKE_csytrs_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_csytrs_3_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_csytrs_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csytrs_3_work", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chetrs_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chetrs_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chetrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_chetrs_3$descriptor() {
        return LAPACKE_chetrs_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chetrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_chetrs_3$handle() {
        return LAPACKE_chetrs_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chetrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_chetrs_3$address() {
        return LAPACKE_chetrs_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chetrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_chetrs_3(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_chetrs_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chetrs_3", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chetrs_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chetrs_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chetrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_chetrs_3_work$descriptor() {
        return LAPACKE_chetrs_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chetrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_chetrs_3_work$handle() {
        return LAPACKE_chetrs_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chetrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_chetrs_3_work$address() {
        return LAPACKE_chetrs_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chetrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_chetrs_3_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_chetrs_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chetrs_3_work", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsytrs_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsytrs_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_3(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const double *e, const int *ipiv, double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsytrs_3$descriptor() {
        return LAPACKE_dsytrs_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_3(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const double *e, const int *ipiv, double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_dsytrs_3$handle() {
        return LAPACKE_dsytrs_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_3(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const double *e, const int *ipiv, double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_dsytrs_3$address() {
        return LAPACKE_dsytrs_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_3(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const double *e, const int *ipiv, double *b, int ldb)
     * }
     */
    public static int LAPACKE_dsytrs_3(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_dsytrs_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsytrs_3", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsytrs_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsytrs_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const double *e, const int *ipiv, double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsytrs_3_work$descriptor() {
        return LAPACKE_dsytrs_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const double *e, const int *ipiv, double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_dsytrs_3_work$handle() {
        return LAPACKE_dsytrs_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const double *e, const int *ipiv, double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_dsytrs_3_work$address() {
        return LAPACKE_dsytrs_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const double *a, int lda, const double *e, const int *ipiv, double *b, int ldb)
     * }
     */
    public static int LAPACKE_dsytrs_3_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_dsytrs_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsytrs_3_work", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssytrs_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssytrs_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_3(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const float *e, const int *ipiv, float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssytrs_3$descriptor() {
        return LAPACKE_ssytrs_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_3(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const float *e, const int *ipiv, float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_ssytrs_3$handle() {
        return LAPACKE_ssytrs_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_3(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const float *e, const int *ipiv, float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_ssytrs_3$address() {
        return LAPACKE_ssytrs_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_3(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const float *e, const int *ipiv, float *b, int ldb)
     * }
     */
    public static int LAPACKE_ssytrs_3(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_ssytrs_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssytrs_3", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssytrs_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssytrs_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const float *e, const int *ipiv, float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssytrs_3_work$descriptor() {
        return LAPACKE_ssytrs_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const float *e, const int *ipiv, float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_ssytrs_3_work$handle() {
        return LAPACKE_ssytrs_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const float *e, const int *ipiv, float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_ssytrs_3_work$address() {
        return LAPACKE_ssytrs_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const float *a, int lda, const float *e, const int *ipiv, float *b, int ldb)
     * }
     */
    public static int LAPACKE_ssytrs_3_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_ssytrs_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssytrs_3_work", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsytrs_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsytrs_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsytrs_3$descriptor() {
        return LAPACKE_zsytrs_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zsytrs_3$handle() {
        return LAPACKE_zsytrs_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zsytrs_3$address() {
        return LAPACKE_zsytrs_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zsytrs_3(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zsytrs_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsytrs_3", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsytrs_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsytrs_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsytrs_3_work$descriptor() {
        return LAPACKE_zsytrs_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zsytrs_3_work$handle() {
        return LAPACKE_zsytrs_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zsytrs_3_work$address() {
        return LAPACKE_zsytrs_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zsytrs_3_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zsytrs_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsytrs_3_work", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhetrs_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhetrs_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhetrs_3$descriptor() {
        return LAPACKE_zhetrs_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zhetrs_3$handle() {
        return LAPACKE_zhetrs_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zhetrs_3$address() {
        return LAPACKE_zhetrs_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_3(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zhetrs_3(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zhetrs_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhetrs_3", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhetrs_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhetrs_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhetrs_3_work$descriptor() {
        return LAPACKE_zhetrs_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zhetrs_3_work$handle() {
        return LAPACKE_zhetrs_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zhetrs_3_work$address() {
        return LAPACKE_zhetrs_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_3_work(int matrix_layout, char uplo, int n, int nrhs, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zhetrs_3_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zhetrs_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhetrs_3_work", matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssytri_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssytri_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssytri_3(int matrix_layout, char uplo, int n, float *a, int lda, const float *e, const int *ipiv)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssytri_3$descriptor() {
        return LAPACKE_ssytri_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssytri_3(int matrix_layout, char uplo, int n, float *a, int lda, const float *e, const int *ipiv)
     * }
     */
    public static MethodHandle LAPACKE_ssytri_3$handle() {
        return LAPACKE_ssytri_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssytri_3(int matrix_layout, char uplo, int n, float *a, int lda, const float *e, const int *ipiv)
     * }
     */
    public static MemorySegment LAPACKE_ssytri_3$address() {
        return LAPACKE_ssytri_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssytri_3(int matrix_layout, char uplo, int n, float *a, int lda, const float *e, const int *ipiv)
     * }
     */
    public static int LAPACKE_ssytri_3(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv) {
        var mh$ = LAPACKE_ssytri_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssytri_3", matrix_layout, uplo, n, a, lda, e, ipiv);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsytri_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsytri_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsytri_3(int matrix_layout, char uplo, int n, double *a, int lda, const double *e, const int *ipiv)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsytri_3$descriptor() {
        return LAPACKE_dsytri_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsytri_3(int matrix_layout, char uplo, int n, double *a, int lda, const double *e, const int *ipiv)
     * }
     */
    public static MethodHandle LAPACKE_dsytri_3$handle() {
        return LAPACKE_dsytri_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsytri_3(int matrix_layout, char uplo, int n, double *a, int lda, const double *e, const int *ipiv)
     * }
     */
    public static MemorySegment LAPACKE_dsytri_3$address() {
        return LAPACKE_dsytri_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsytri_3(int matrix_layout, char uplo, int n, double *a, int lda, const double *e, const int *ipiv)
     * }
     */
    public static int LAPACKE_dsytri_3(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv) {
        var mh$ = LAPACKE_dsytri_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsytri_3", matrix_layout, uplo, n, a, lda, e, ipiv);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csytri_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csytri_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csytri_3(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv)
     * }
     */
    public static FunctionDescriptor LAPACKE_csytri_3$descriptor() {
        return LAPACKE_csytri_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csytri_3(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv)
     * }
     */
    public static MethodHandle LAPACKE_csytri_3$handle() {
        return LAPACKE_csytri_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csytri_3(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv)
     * }
     */
    public static MemorySegment LAPACKE_csytri_3$address() {
        return LAPACKE_csytri_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csytri_3(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv)
     * }
     */
    public static int LAPACKE_csytri_3(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv) {
        var mh$ = LAPACKE_csytri_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csytri_3", matrix_layout, uplo, n, a, lda, e, ipiv);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsytri_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsytri_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsytri_3(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsytri_3$descriptor() {
        return LAPACKE_zsytri_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsytri_3(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv)
     * }
     */
    public static MethodHandle LAPACKE_zsytri_3$handle() {
        return LAPACKE_zsytri_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsytri_3(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv)
     * }
     */
    public static MemorySegment LAPACKE_zsytri_3$address() {
        return LAPACKE_zsytri_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsytri_3(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv)
     * }
     */
    public static int LAPACKE_zsytri_3(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv) {
        var mh$ = LAPACKE_zsytri_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsytri_3", matrix_layout, uplo, n, a, lda, e, ipiv);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chetri_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chetri_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chetri_3(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv)
     * }
     */
    public static FunctionDescriptor LAPACKE_chetri_3$descriptor() {
        return LAPACKE_chetri_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chetri_3(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv)
     * }
     */
    public static MethodHandle LAPACKE_chetri_3$handle() {
        return LAPACKE_chetri_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chetri_3(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv)
     * }
     */
    public static MemorySegment LAPACKE_chetri_3$address() {
        return LAPACKE_chetri_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chetri_3(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv)
     * }
     */
    public static int LAPACKE_chetri_3(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv) {
        var mh$ = LAPACKE_chetri_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chetri_3", matrix_layout, uplo, n, a, lda, e, ipiv);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhetri_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhetri_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhetri_3(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhetri_3$descriptor() {
        return LAPACKE_zhetri_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhetri_3(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv)
     * }
     */
    public static MethodHandle LAPACKE_zhetri_3$handle() {
        return LAPACKE_zhetri_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhetri_3(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv)
     * }
     */
    public static MemorySegment LAPACKE_zhetri_3$address() {
        return LAPACKE_zhetri_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhetri_3(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv)
     * }
     */
    public static int LAPACKE_zhetri_3(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv) {
        var mh$ = LAPACKE_zhetri_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhetri_3", matrix_layout, uplo, n, a, lda, e, ipiv);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssytri_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssytri_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssytri_3_work(int matrix_layout, char uplo, int n, float *a, int lda, const float *e, const int *ipiv, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssytri_3_work$descriptor() {
        return LAPACKE_ssytri_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssytri_3_work(int matrix_layout, char uplo, int n, float *a, int lda, const float *e, const int *ipiv, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_ssytri_3_work$handle() {
        return LAPACKE_ssytri_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssytri_3_work(int matrix_layout, char uplo, int n, float *a, int lda, const float *e, const int *ipiv, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_ssytri_3_work$address() {
        return LAPACKE_ssytri_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssytri_3_work(int matrix_layout, char uplo, int n, float *a, int lda, const float *e, const int *ipiv, float *work, int lwork)
     * }
     */
    public static int LAPACKE_ssytri_3_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_ssytri_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssytri_3_work", matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsytri_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsytri_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsytri_3_work(int matrix_layout, char uplo, int n, double *a, int lda, const double *e, const int *ipiv, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsytri_3_work$descriptor() {
        return LAPACKE_dsytri_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsytri_3_work(int matrix_layout, char uplo, int n, double *a, int lda, const double *e, const int *ipiv, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dsytri_3_work$handle() {
        return LAPACKE_dsytri_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsytri_3_work(int matrix_layout, char uplo, int n, double *a, int lda, const double *e, const int *ipiv, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dsytri_3_work$address() {
        return LAPACKE_dsytri_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsytri_3_work(int matrix_layout, char uplo, int n, double *a, int lda, const double *e, const int *ipiv, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dsytri_3_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dsytri_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsytri_3_work", matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csytri_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csytri_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csytri_3_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_csytri_3_work$descriptor() {
        return LAPACKE_csytri_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csytri_3_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_csytri_3_work$handle() {
        return LAPACKE_csytri_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csytri_3_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_csytri_3_work$address() {
        return LAPACKE_csytri_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csytri_3_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_csytri_3_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_csytri_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csytri_3_work", matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsytri_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsytri_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsytri_3_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsytri_3_work$descriptor() {
        return LAPACKE_zsytri_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsytri_3_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zsytri_3_work$handle() {
        return LAPACKE_zsytri_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsytri_3_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zsytri_3_work$address() {
        return LAPACKE_zsytri_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsytri_3_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zsytri_3_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zsytri_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsytri_3_work", matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chetri_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chetri_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chetri_3_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_chetri_3_work$descriptor() {
        return LAPACKE_chetri_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chetri_3_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_chetri_3_work$handle() {
        return LAPACKE_chetri_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chetri_3_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_chetri_3_work$address() {
        return LAPACKE_chetri_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chetri_3_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, const _Complex float *e, const int *ipiv, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_chetri_3_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_chetri_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chetri_3_work", matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhetri_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhetri_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhetri_3_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhetri_3_work$descriptor() {
        return LAPACKE_zhetri_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhetri_3_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zhetri_3_work$handle() {
        return LAPACKE_zhetri_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhetri_3_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zhetri_3_work$address() {
        return LAPACKE_zhetri_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhetri_3_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, const _Complex double *e, const int *ipiv, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zhetri_3_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zhetri_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhetri_3_work", matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssycon_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssycon_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssycon_3(int matrix_layout, char uplo, int n, const float *a, int lda, const float *e, const int *ipiv, float anorm, float *rcond)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssycon_3$descriptor() {
        return LAPACKE_ssycon_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssycon_3(int matrix_layout, char uplo, int n, const float *a, int lda, const float *e, const int *ipiv, float anorm, float *rcond)
     * }
     */
    public static MethodHandle LAPACKE_ssycon_3$handle() {
        return LAPACKE_ssycon_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssycon_3(int matrix_layout, char uplo, int n, const float *a, int lda, const float *e, const int *ipiv, float anorm, float *rcond)
     * }
     */
    public static MemorySegment LAPACKE_ssycon_3$address() {
        return LAPACKE_ssycon_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssycon_3(int matrix_layout, char uplo, int n, const float *a, int lda, const float *e, const int *ipiv, float anorm, float *rcond)
     * }
     */
    public static int LAPACKE_ssycon_3(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, float anorm, MemorySegment rcond) {
        var mh$ = LAPACKE_ssycon_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssycon_3", matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsycon_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsycon_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsycon_3(int matrix_layout, char uplo, int n, const double *a, int lda, const double *e, const int *ipiv, double anorm, double *rcond)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsycon_3$descriptor() {
        return LAPACKE_dsycon_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsycon_3(int matrix_layout, char uplo, int n, const double *a, int lda, const double *e, const int *ipiv, double anorm, double *rcond)
     * }
     */
    public static MethodHandle LAPACKE_dsycon_3$handle() {
        return LAPACKE_dsycon_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsycon_3(int matrix_layout, char uplo, int n, const double *a, int lda, const double *e, const int *ipiv, double anorm, double *rcond)
     * }
     */
    public static MemorySegment LAPACKE_dsycon_3$address() {
        return LAPACKE_dsycon_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsycon_3(int matrix_layout, char uplo, int n, const double *a, int lda, const double *e, const int *ipiv, double anorm, double *rcond)
     * }
     */
    public static int LAPACKE_dsycon_3(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, double anorm, MemorySegment rcond) {
        var mh$ = LAPACKE_dsycon_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsycon_3", matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csycon_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csycon_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csycon_3(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond)
     * }
     */
    public static FunctionDescriptor LAPACKE_csycon_3$descriptor() {
        return LAPACKE_csycon_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csycon_3(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond)
     * }
     */
    public static MethodHandle LAPACKE_csycon_3$handle() {
        return LAPACKE_csycon_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csycon_3(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond)
     * }
     */
    public static MemorySegment LAPACKE_csycon_3$address() {
        return LAPACKE_csycon_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csycon_3(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond)
     * }
     */
    public static int LAPACKE_csycon_3(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, float anorm, MemorySegment rcond) {
        var mh$ = LAPACKE_csycon_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csycon_3", matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsycon_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsycon_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsycon_3(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsycon_3$descriptor() {
        return LAPACKE_zsycon_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsycon_3(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond)
     * }
     */
    public static MethodHandle LAPACKE_zsycon_3$handle() {
        return LAPACKE_zsycon_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsycon_3(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond)
     * }
     */
    public static MemorySegment LAPACKE_zsycon_3$address() {
        return LAPACKE_zsycon_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsycon_3(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond)
     * }
     */
    public static int LAPACKE_zsycon_3(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, double anorm, MemorySegment rcond) {
        var mh$ = LAPACKE_zsycon_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsycon_3", matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_checon_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_checon_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_checon_3(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond)
     * }
     */
    public static FunctionDescriptor LAPACKE_checon_3$descriptor() {
        return LAPACKE_checon_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_checon_3(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond)
     * }
     */
    public static MethodHandle LAPACKE_checon_3$handle() {
        return LAPACKE_checon_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_checon_3(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond)
     * }
     */
    public static MemorySegment LAPACKE_checon_3$address() {
        return LAPACKE_checon_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_checon_3(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond)
     * }
     */
    public static int LAPACKE_checon_3(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, float anorm, MemorySegment rcond) {
        var mh$ = LAPACKE_checon_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_checon_3", matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhecon_3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhecon_3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhecon_3(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhecon_3$descriptor() {
        return LAPACKE_zhecon_3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhecon_3(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond)
     * }
     */
    public static MethodHandle LAPACKE_zhecon_3$handle() {
        return LAPACKE_zhecon_3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhecon_3(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond)
     * }
     */
    public static MemorySegment LAPACKE_zhecon_3$address() {
        return LAPACKE_zhecon_3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhecon_3(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond)
     * }
     */
    public static int LAPACKE_zhecon_3(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, double anorm, MemorySegment rcond) {
        var mh$ = LAPACKE_zhecon_3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhecon_3", matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssycon_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssycon_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssycon_3_work(int matrix_layout, char uplo, int n, const float *a, int lda, const float *e, const int *ipiv, float anorm, float *rcond, float *work, int *iwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssycon_3_work$descriptor() {
        return LAPACKE_ssycon_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssycon_3_work(int matrix_layout, char uplo, int n, const float *a, int lda, const float *e, const int *ipiv, float anorm, float *rcond, float *work, int *iwork)
     * }
     */
    public static MethodHandle LAPACKE_ssycon_3_work$handle() {
        return LAPACKE_ssycon_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssycon_3_work(int matrix_layout, char uplo, int n, const float *a, int lda, const float *e, const int *ipiv, float anorm, float *rcond, float *work, int *iwork)
     * }
     */
    public static MemorySegment LAPACKE_ssycon_3_work$address() {
        return LAPACKE_ssycon_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssycon_3_work(int matrix_layout, char uplo, int n, const float *a, int lda, const float *e, const int *ipiv, float anorm, float *rcond, float *work, int *iwork)
     * }
     */
    public static int LAPACKE_ssycon_3_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, float anorm, MemorySegment rcond, MemorySegment work, MemorySegment iwork) {
        var mh$ = LAPACKE_ssycon_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssycon_3_work", matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond, work, iwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond, work, iwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsycon_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsycon_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsycon_3_work(int matrix_layout, char uplo, int n, const double *a, int lda, const double *e, const int *ipiv, double anorm, double *rcond, double *work, int *iwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsycon_3_work$descriptor() {
        return LAPACKE_dsycon_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsycon_3_work(int matrix_layout, char uplo, int n, const double *a, int lda, const double *e, const int *ipiv, double anorm, double *rcond, double *work, int *iwork)
     * }
     */
    public static MethodHandle LAPACKE_dsycon_3_work$handle() {
        return LAPACKE_dsycon_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsycon_3_work(int matrix_layout, char uplo, int n, const double *a, int lda, const double *e, const int *ipiv, double anorm, double *rcond, double *work, int *iwork)
     * }
     */
    public static MemorySegment LAPACKE_dsycon_3_work$address() {
        return LAPACKE_dsycon_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsycon_3_work(int matrix_layout, char uplo, int n, const double *a, int lda, const double *e, const int *ipiv, double anorm, double *rcond, double *work, int *iwork)
     * }
     */
    public static int LAPACKE_dsycon_3_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, double anorm, MemorySegment rcond, MemorySegment work, MemorySegment iwork) {
        var mh$ = LAPACKE_dsycon_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsycon_3_work", matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond, work, iwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond, work, iwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csycon_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csycon_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csycon_3_work(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond, _Complex float *work)
     * }
     */
    public static FunctionDescriptor LAPACKE_csycon_3_work$descriptor() {
        return LAPACKE_csycon_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csycon_3_work(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond, _Complex float *work)
     * }
     */
    public static MethodHandle LAPACKE_csycon_3_work$handle() {
        return LAPACKE_csycon_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csycon_3_work(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond, _Complex float *work)
     * }
     */
    public static MemorySegment LAPACKE_csycon_3_work$address() {
        return LAPACKE_csycon_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csycon_3_work(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond, _Complex float *work)
     * }
     */
    public static int LAPACKE_csycon_3_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, float anorm, MemorySegment rcond, MemorySegment work) {
        var mh$ = LAPACKE_csycon_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csycon_3_work", matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond, work);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond, work);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsycon_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsycon_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsycon_3_work(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond, _Complex double *work)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsycon_3_work$descriptor() {
        return LAPACKE_zsycon_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsycon_3_work(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond, _Complex double *work)
     * }
     */
    public static MethodHandle LAPACKE_zsycon_3_work$handle() {
        return LAPACKE_zsycon_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsycon_3_work(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond, _Complex double *work)
     * }
     */
    public static MemorySegment LAPACKE_zsycon_3_work$address() {
        return LAPACKE_zsycon_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsycon_3_work(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond, _Complex double *work)
     * }
     */
    public static int LAPACKE_zsycon_3_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, double anorm, MemorySegment rcond, MemorySegment work) {
        var mh$ = LAPACKE_zsycon_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsycon_3_work", matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond, work);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond, work);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_checon_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_checon_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_checon_3_work(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond, _Complex float *work)
     * }
     */
    public static FunctionDescriptor LAPACKE_checon_3_work$descriptor() {
        return LAPACKE_checon_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_checon_3_work(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond, _Complex float *work)
     * }
     */
    public static MethodHandle LAPACKE_checon_3_work$handle() {
        return LAPACKE_checon_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_checon_3_work(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond, _Complex float *work)
     * }
     */
    public static MemorySegment LAPACKE_checon_3_work$address() {
        return LAPACKE_checon_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_checon_3_work(int matrix_layout, char uplo, int n, const _Complex float *a, int lda, const _Complex float *e, const int *ipiv, float anorm, float *rcond, _Complex float *work)
     * }
     */
    public static int LAPACKE_checon_3_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, float anorm, MemorySegment rcond, MemorySegment work) {
        var mh$ = LAPACKE_checon_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_checon_3_work", matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond, work);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond, work);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhecon_3_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhecon_3_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhecon_3_work(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond, _Complex double *work)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhecon_3_work$descriptor() {
        return LAPACKE_zhecon_3_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhecon_3_work(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond, _Complex double *work)
     * }
     */
    public static MethodHandle LAPACKE_zhecon_3_work$handle() {
        return LAPACKE_zhecon_3_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhecon_3_work(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond, _Complex double *work)
     * }
     */
    public static MemorySegment LAPACKE_zhecon_3_work$address() {
        return LAPACKE_zhecon_3_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhecon_3_work(int matrix_layout, char uplo, int n, const _Complex double *a, int lda, const _Complex double *e, const int *ipiv, double anorm, double *rcond, _Complex double *work)
     * }
     */
    public static int LAPACKE_zhecon_3_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment e, MemorySegment ipiv, double anorm, MemorySegment rcond, MemorySegment work) {
        var mh$ = LAPACKE_zhecon_3_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhecon_3_work", matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond, work);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond, work);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_sgelq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_sgelq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_sgelq(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize)
     * }
     */
    public static FunctionDescriptor LAPACKE_sgelq$descriptor() {
        return LAPACKE_sgelq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_sgelq(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize)
     * }
     */
    public static MethodHandle LAPACKE_sgelq$handle() {
        return LAPACKE_sgelq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_sgelq(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize)
     * }
     */
    public static MemorySegment LAPACKE_sgelq$address() {
        return LAPACKE_sgelq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_sgelq(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize)
     * }
     */
    public static int LAPACKE_sgelq(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize) {
        var mh$ = LAPACKE_sgelq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_sgelq", matrix_layout, m, n, a, lda, t, tsize);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dgelq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dgelq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dgelq(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize)
     * }
     */
    public static FunctionDescriptor LAPACKE_dgelq$descriptor() {
        return LAPACKE_dgelq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dgelq(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize)
     * }
     */
    public static MethodHandle LAPACKE_dgelq$handle() {
        return LAPACKE_dgelq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dgelq(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize)
     * }
     */
    public static MemorySegment LAPACKE_dgelq$address() {
        return LAPACKE_dgelq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dgelq(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize)
     * }
     */
    public static int LAPACKE_dgelq(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize) {
        var mh$ = LAPACKE_dgelq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dgelq", matrix_layout, m, n, a, lda, t, tsize);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cgelq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cgelq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cgelq(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize)
     * }
     */
    public static FunctionDescriptor LAPACKE_cgelq$descriptor() {
        return LAPACKE_cgelq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cgelq(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize)
     * }
     */
    public static MethodHandle LAPACKE_cgelq$handle() {
        return LAPACKE_cgelq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cgelq(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize)
     * }
     */
    public static MemorySegment LAPACKE_cgelq$address() {
        return LAPACKE_cgelq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cgelq(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize)
     * }
     */
    public static int LAPACKE_cgelq(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize) {
        var mh$ = LAPACKE_cgelq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cgelq", matrix_layout, m, n, a, lda, t, tsize);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zgelq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zgelq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zgelq(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize)
     * }
     */
    public static FunctionDescriptor LAPACKE_zgelq$descriptor() {
        return LAPACKE_zgelq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zgelq(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize)
     * }
     */
    public static MethodHandle LAPACKE_zgelq$handle() {
        return LAPACKE_zgelq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zgelq(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize)
     * }
     */
    public static MemorySegment LAPACKE_zgelq$address() {
        return LAPACKE_zgelq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zgelq(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize)
     * }
     */
    public static int LAPACKE_zgelq(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize) {
        var mh$ = LAPACKE_zgelq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zgelq", matrix_layout, m, n, a, lda, t, tsize);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_sgelq_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_sgelq_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_sgelq_work(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_sgelq_work$descriptor() {
        return LAPACKE_sgelq_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_sgelq_work(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_sgelq_work$handle() {
        return LAPACKE_sgelq_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_sgelq_work(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_sgelq_work$address() {
        return LAPACKE_sgelq_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_sgelq_work(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize, float *work, int lwork)
     * }
     */
    public static int LAPACKE_sgelq_work(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_sgelq_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_sgelq_work", matrix_layout, m, n, a, lda, t, tsize, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dgelq_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dgelq_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dgelq_work(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dgelq_work$descriptor() {
        return LAPACKE_dgelq_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dgelq_work(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dgelq_work$handle() {
        return LAPACKE_dgelq_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dgelq_work(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dgelq_work$address() {
        return LAPACKE_dgelq_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dgelq_work(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dgelq_work(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dgelq_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dgelq_work", matrix_layout, m, n, a, lda, t, tsize, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cgelq_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cgelq_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cgelq_work(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_cgelq_work$descriptor() {
        return LAPACKE_cgelq_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cgelq_work(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_cgelq_work$handle() {
        return LAPACKE_cgelq_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cgelq_work(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_cgelq_work$address() {
        return LAPACKE_cgelq_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cgelq_work(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_cgelq_work(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_cgelq_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cgelq_work", matrix_layout, m, n, a, lda, t, tsize, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zgelq_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zgelq_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zgelq_work(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zgelq_work$descriptor() {
        return LAPACKE_zgelq_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zgelq_work(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zgelq_work$handle() {
        return LAPACKE_zgelq_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zgelq_work(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zgelq_work$address() {
        return LAPACKE_zgelq_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zgelq_work(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zgelq_work(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zgelq_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zgelq_work", matrix_layout, m, n, a, lda, t, tsize, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_sgemlq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_sgemlq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_sgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc)
     * }
     */
    public static FunctionDescriptor LAPACKE_sgemlq$descriptor() {
        return LAPACKE_sgemlq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_sgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc)
     * }
     */
    public static MethodHandle LAPACKE_sgemlq$handle() {
        return LAPACKE_sgemlq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_sgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc)
     * }
     */
    public static MemorySegment LAPACKE_sgemlq$address() {
        return LAPACKE_sgemlq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_sgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc)
     * }
     */
    public static int LAPACKE_sgemlq(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc) {
        var mh$ = LAPACKE_sgemlq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_sgemlq", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dgemlq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dgemlq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc)
     * }
     */
    public static FunctionDescriptor LAPACKE_dgemlq$descriptor() {
        return LAPACKE_dgemlq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc)
     * }
     */
    public static MethodHandle LAPACKE_dgemlq$handle() {
        return LAPACKE_dgemlq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc)
     * }
     */
    public static MemorySegment LAPACKE_dgemlq$address() {
        return LAPACKE_dgemlq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc)
     * }
     */
    public static int LAPACKE_dgemlq(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc) {
        var mh$ = LAPACKE_dgemlq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dgemlq", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cgemlq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cgemlq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc)
     * }
     */
    public static FunctionDescriptor LAPACKE_cgemlq$descriptor() {
        return LAPACKE_cgemlq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc)
     * }
     */
    public static MethodHandle LAPACKE_cgemlq$handle() {
        return LAPACKE_cgemlq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc)
     * }
     */
    public static MemorySegment LAPACKE_cgemlq$address() {
        return LAPACKE_cgemlq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc)
     * }
     */
    public static int LAPACKE_cgemlq(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc) {
        var mh$ = LAPACKE_cgemlq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cgemlq", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zgemlq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zgemlq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc)
     * }
     */
    public static FunctionDescriptor LAPACKE_zgemlq$descriptor() {
        return LAPACKE_zgemlq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc)
     * }
     */
    public static MethodHandle LAPACKE_zgemlq$handle() {
        return LAPACKE_zgemlq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc)
     * }
     */
    public static MemorySegment LAPACKE_zgemlq$address() {
        return LAPACKE_zgemlq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zgemlq(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc)
     * }
     */
    public static int LAPACKE_zgemlq(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc) {
        var mh$ = LAPACKE_zgemlq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zgemlq", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_sgemlq_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_sgemlq_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_sgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_sgemlq_work$descriptor() {
        return LAPACKE_sgemlq_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_sgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_sgemlq_work$handle() {
        return LAPACKE_sgemlq_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_sgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_sgemlq_work$address() {
        return LAPACKE_sgemlq_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_sgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc, float *work, int lwork)
     * }
     */
    public static int LAPACKE_sgemlq_work(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_sgemlq_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_sgemlq_work", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dgemlq_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dgemlq_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dgemlq_work$descriptor() {
        return LAPACKE_dgemlq_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dgemlq_work$handle() {
        return LAPACKE_dgemlq_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dgemlq_work$address() {
        return LAPACKE_dgemlq_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dgemlq_work(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dgemlq_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dgemlq_work", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cgemlq_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cgemlq_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_cgemlq_work$descriptor() {
        return LAPACKE_cgemlq_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_cgemlq_work$handle() {
        return LAPACKE_cgemlq_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_cgemlq_work$address() {
        return LAPACKE_cgemlq_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_cgemlq_work(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_cgemlq_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cgemlq_work", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zgemlq_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zgemlq_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zgemlq_work$descriptor() {
        return LAPACKE_zgemlq_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zgemlq_work$handle() {
        return LAPACKE_zgemlq_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zgemlq_work$address() {
        return LAPACKE_zgemlq_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zgemlq_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zgemlq_work(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zgemlq_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zgemlq_work", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_sgeqr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_sgeqr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_sgeqr(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize)
     * }
     */
    public static FunctionDescriptor LAPACKE_sgeqr$descriptor() {
        return LAPACKE_sgeqr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_sgeqr(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize)
     * }
     */
    public static MethodHandle LAPACKE_sgeqr$handle() {
        return LAPACKE_sgeqr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_sgeqr(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize)
     * }
     */
    public static MemorySegment LAPACKE_sgeqr$address() {
        return LAPACKE_sgeqr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_sgeqr(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize)
     * }
     */
    public static int LAPACKE_sgeqr(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize) {
        var mh$ = LAPACKE_sgeqr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_sgeqr", matrix_layout, m, n, a, lda, t, tsize);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dgeqr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dgeqr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dgeqr(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize)
     * }
     */
    public static FunctionDescriptor LAPACKE_dgeqr$descriptor() {
        return LAPACKE_dgeqr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dgeqr(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize)
     * }
     */
    public static MethodHandle LAPACKE_dgeqr$handle() {
        return LAPACKE_dgeqr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dgeqr(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize)
     * }
     */
    public static MemorySegment LAPACKE_dgeqr$address() {
        return LAPACKE_dgeqr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dgeqr(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize)
     * }
     */
    public static int LAPACKE_dgeqr(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize) {
        var mh$ = LAPACKE_dgeqr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dgeqr", matrix_layout, m, n, a, lda, t, tsize);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cgeqr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cgeqr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cgeqr(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize)
     * }
     */
    public static FunctionDescriptor LAPACKE_cgeqr$descriptor() {
        return LAPACKE_cgeqr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cgeqr(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize)
     * }
     */
    public static MethodHandle LAPACKE_cgeqr$handle() {
        return LAPACKE_cgeqr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cgeqr(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize)
     * }
     */
    public static MemorySegment LAPACKE_cgeqr$address() {
        return LAPACKE_cgeqr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cgeqr(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize)
     * }
     */
    public static int LAPACKE_cgeqr(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize) {
        var mh$ = LAPACKE_cgeqr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cgeqr", matrix_layout, m, n, a, lda, t, tsize);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zgeqr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zgeqr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zgeqr(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize)
     * }
     */
    public static FunctionDescriptor LAPACKE_zgeqr$descriptor() {
        return LAPACKE_zgeqr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zgeqr(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize)
     * }
     */
    public static MethodHandle LAPACKE_zgeqr$handle() {
        return LAPACKE_zgeqr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zgeqr(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize)
     * }
     */
    public static MemorySegment LAPACKE_zgeqr$address() {
        return LAPACKE_zgeqr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zgeqr(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize)
     * }
     */
    public static int LAPACKE_zgeqr(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize) {
        var mh$ = LAPACKE_zgeqr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zgeqr", matrix_layout, m, n, a, lda, t, tsize);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_sgeqr_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_sgeqr_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_sgeqr_work(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_sgeqr_work$descriptor() {
        return LAPACKE_sgeqr_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_sgeqr_work(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_sgeqr_work$handle() {
        return LAPACKE_sgeqr_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_sgeqr_work(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_sgeqr_work$address() {
        return LAPACKE_sgeqr_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_sgeqr_work(int matrix_layout, int m, int n, float *a, int lda, float *t, int tsize, float *work, int lwork)
     * }
     */
    public static int LAPACKE_sgeqr_work(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_sgeqr_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_sgeqr_work", matrix_layout, m, n, a, lda, t, tsize, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dgeqr_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dgeqr_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dgeqr_work(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dgeqr_work$descriptor() {
        return LAPACKE_dgeqr_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dgeqr_work(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dgeqr_work$handle() {
        return LAPACKE_dgeqr_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dgeqr_work(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dgeqr_work$address() {
        return LAPACKE_dgeqr_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dgeqr_work(int matrix_layout, int m, int n, double *a, int lda, double *t, int tsize, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dgeqr_work(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dgeqr_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dgeqr_work", matrix_layout, m, n, a, lda, t, tsize, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cgeqr_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cgeqr_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cgeqr_work(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_cgeqr_work$descriptor() {
        return LAPACKE_cgeqr_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cgeqr_work(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_cgeqr_work$handle() {
        return LAPACKE_cgeqr_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cgeqr_work(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_cgeqr_work$address() {
        return LAPACKE_cgeqr_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cgeqr_work(int matrix_layout, int m, int n, _Complex float *a, int lda, _Complex float *t, int tsize, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_cgeqr_work(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_cgeqr_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cgeqr_work", matrix_layout, m, n, a, lda, t, tsize, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zgeqr_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zgeqr_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zgeqr_work(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zgeqr_work$descriptor() {
        return LAPACKE_zgeqr_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zgeqr_work(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zgeqr_work$handle() {
        return LAPACKE_zgeqr_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zgeqr_work(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zgeqr_work$address() {
        return LAPACKE_zgeqr_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zgeqr_work(int matrix_layout, int m, int n, _Complex double *a, int lda, _Complex double *t, int tsize, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zgeqr_work(int matrix_layout, int m, int n, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zgeqr_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zgeqr_work", matrix_layout, m, n, a, lda, t, tsize, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, a, lda, t, tsize, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_sgemqr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_sgemqr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_sgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc)
     * }
     */
    public static FunctionDescriptor LAPACKE_sgemqr$descriptor() {
        return LAPACKE_sgemqr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_sgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc)
     * }
     */
    public static MethodHandle LAPACKE_sgemqr$handle() {
        return LAPACKE_sgemqr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_sgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc)
     * }
     */
    public static MemorySegment LAPACKE_sgemqr$address() {
        return LAPACKE_sgemqr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_sgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc)
     * }
     */
    public static int LAPACKE_sgemqr(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc) {
        var mh$ = LAPACKE_sgemqr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_sgemqr", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dgemqr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dgemqr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc)
     * }
     */
    public static FunctionDescriptor LAPACKE_dgemqr$descriptor() {
        return LAPACKE_dgemqr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc)
     * }
     */
    public static MethodHandle LAPACKE_dgemqr$handle() {
        return LAPACKE_dgemqr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc)
     * }
     */
    public static MemorySegment LAPACKE_dgemqr$address() {
        return LAPACKE_dgemqr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc)
     * }
     */
    public static int LAPACKE_dgemqr(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc) {
        var mh$ = LAPACKE_dgemqr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dgemqr", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cgemqr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cgemqr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc)
     * }
     */
    public static FunctionDescriptor LAPACKE_cgemqr$descriptor() {
        return LAPACKE_cgemqr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc)
     * }
     */
    public static MethodHandle LAPACKE_cgemqr$handle() {
        return LAPACKE_cgemqr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc)
     * }
     */
    public static MemorySegment LAPACKE_cgemqr$address() {
        return LAPACKE_cgemqr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc)
     * }
     */
    public static int LAPACKE_cgemqr(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc) {
        var mh$ = LAPACKE_cgemqr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cgemqr", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zgemqr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zgemqr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc)
     * }
     */
    public static FunctionDescriptor LAPACKE_zgemqr$descriptor() {
        return LAPACKE_zgemqr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc)
     * }
     */
    public static MethodHandle LAPACKE_zgemqr$handle() {
        return LAPACKE_zgemqr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc)
     * }
     */
    public static MemorySegment LAPACKE_zgemqr$address() {
        return LAPACKE_zgemqr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zgemqr(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc)
     * }
     */
    public static int LAPACKE_zgemqr(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc) {
        var mh$ = LAPACKE_zgemqr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zgemqr", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_sgemqr_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_sgemqr_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_sgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_sgemqr_work$descriptor() {
        return LAPACKE_sgemqr_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_sgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_sgemqr_work$handle() {
        return LAPACKE_sgemqr_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_sgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_sgemqr_work$address() {
        return LAPACKE_sgemqr_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_sgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const float *a, int lda, const float *t, int tsize, float *c, int ldc, float *work, int lwork)
     * }
     */
    public static int LAPACKE_sgemqr_work(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_sgemqr_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_sgemqr_work", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dgemqr_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dgemqr_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dgemqr_work$descriptor() {
        return LAPACKE_dgemqr_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dgemqr_work$handle() {
        return LAPACKE_dgemqr_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dgemqr_work$address() {
        return LAPACKE_dgemqr_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const double *a, int lda, const double *t, int tsize, double *c, int ldc, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dgemqr_work(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dgemqr_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dgemqr_work", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cgemqr_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cgemqr_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_cgemqr_work$descriptor() {
        return LAPACKE_cgemqr_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_cgemqr_work$handle() {
        return LAPACKE_cgemqr_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_cgemqr_work$address() {
        return LAPACKE_cgemqr_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex float *a, int lda, const _Complex float *t, int tsize, _Complex float *c, int ldc, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_cgemqr_work(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_cgemqr_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cgemqr_work", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zgemqr_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zgemqr_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zgemqr_work$descriptor() {
        return LAPACKE_zgemqr_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zgemqr_work$handle() {
        return LAPACKE_zgemqr_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zgemqr_work$address() {
        return LAPACKE_zgemqr_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zgemqr_work(int matrix_layout, char side, char trans, int m, int n, int k, const _Complex double *a, int lda, const _Complex double *t, int tsize, _Complex double *c, int ldc, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zgemqr_work(int matrix_layout, byte side, byte trans, int m, int n, int k, MemorySegment a, int lda, MemorySegment t, int tsize, MemorySegment c, int ldc, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zgemqr_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zgemqr_work", matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_sgetsls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_sgetsls");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_sgetsls(int matrix_layout, char trans, int m, int n, int nrhs, float *a, int lda, float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_sgetsls$descriptor() {
        return LAPACKE_sgetsls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_sgetsls(int matrix_layout, char trans, int m, int n, int nrhs, float *a, int lda, float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_sgetsls$handle() {
        return LAPACKE_sgetsls.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_sgetsls(int matrix_layout, char trans, int m, int n, int nrhs, float *a, int lda, float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_sgetsls$address() {
        return LAPACKE_sgetsls.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_sgetsls(int matrix_layout, char trans, int m, int n, int nrhs, float *a, int lda, float *b, int ldb)
     * }
     */
    public static int LAPACKE_sgetsls(int matrix_layout, byte trans, int m, int n, int nrhs, MemorySegment a, int lda, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_sgetsls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_sgetsls", matrix_layout, trans, m, n, nrhs, a, lda, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dgetsls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dgetsls");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dgetsls(int matrix_layout, char trans, int m, int n, int nrhs, double *a, int lda, double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_dgetsls$descriptor() {
        return LAPACKE_dgetsls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dgetsls(int matrix_layout, char trans, int m, int n, int nrhs, double *a, int lda, double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_dgetsls$handle() {
        return LAPACKE_dgetsls.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dgetsls(int matrix_layout, char trans, int m, int n, int nrhs, double *a, int lda, double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_dgetsls$address() {
        return LAPACKE_dgetsls.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dgetsls(int matrix_layout, char trans, int m, int n, int nrhs, double *a, int lda, double *b, int ldb)
     * }
     */
    public static int LAPACKE_dgetsls(int matrix_layout, byte trans, int m, int n, int nrhs, MemorySegment a, int lda, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_dgetsls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dgetsls", matrix_layout, trans, m, n, nrhs, a, lda, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cgetsls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cgetsls");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cgetsls(int matrix_layout, char trans, int m, int n, int nrhs, _Complex float *a, int lda, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_cgetsls$descriptor() {
        return LAPACKE_cgetsls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cgetsls(int matrix_layout, char trans, int m, int n, int nrhs, _Complex float *a, int lda, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_cgetsls$handle() {
        return LAPACKE_cgetsls.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cgetsls(int matrix_layout, char trans, int m, int n, int nrhs, _Complex float *a, int lda, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_cgetsls$address() {
        return LAPACKE_cgetsls.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cgetsls(int matrix_layout, char trans, int m, int n, int nrhs, _Complex float *a, int lda, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_cgetsls(int matrix_layout, byte trans, int m, int n, int nrhs, MemorySegment a, int lda, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_cgetsls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cgetsls", matrix_layout, trans, m, n, nrhs, a, lda, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zgetsls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zgetsls");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zgetsls(int matrix_layout, char trans, int m, int n, int nrhs, _Complex double *a, int lda, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zgetsls$descriptor() {
        return LAPACKE_zgetsls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zgetsls(int matrix_layout, char trans, int m, int n, int nrhs, _Complex double *a, int lda, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zgetsls$handle() {
        return LAPACKE_zgetsls.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zgetsls(int matrix_layout, char trans, int m, int n, int nrhs, _Complex double *a, int lda, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zgetsls$address() {
        return LAPACKE_zgetsls.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zgetsls(int matrix_layout, char trans, int m, int n, int nrhs, _Complex double *a, int lda, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zgetsls(int matrix_layout, byte trans, int m, int n, int nrhs, MemorySegment a, int lda, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zgetsls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zgetsls", matrix_layout, trans, m, n, nrhs, a, lda, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_sgetsls_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_sgetsls_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_sgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, float *a, int lda, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_sgetsls_work$descriptor() {
        return LAPACKE_sgetsls_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_sgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, float *a, int lda, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_sgetsls_work$handle() {
        return LAPACKE_sgetsls_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_sgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, float *a, int lda, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_sgetsls_work$address() {
        return LAPACKE_sgetsls_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_sgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, float *a, int lda, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static int LAPACKE_sgetsls_work(int matrix_layout, byte trans, int m, int n, int nrhs, MemorySegment a, int lda, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_sgetsls_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_sgetsls_work", matrix_layout, trans, m, n, nrhs, a, lda, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dgetsls_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dgetsls_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, double *a, int lda, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dgetsls_work$descriptor() {
        return LAPACKE_dgetsls_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, double *a, int lda, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dgetsls_work$handle() {
        return LAPACKE_dgetsls_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, double *a, int lda, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dgetsls_work$address() {
        return LAPACKE_dgetsls_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, double *a, int lda, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dgetsls_work(int matrix_layout, byte trans, int m, int n, int nrhs, MemorySegment a, int lda, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dgetsls_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dgetsls_work", matrix_layout, trans, m, n, nrhs, a, lda, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cgetsls_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cgetsls_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, _Complex float *a, int lda, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_cgetsls_work$descriptor() {
        return LAPACKE_cgetsls_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, _Complex float *a, int lda, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_cgetsls_work$handle() {
        return LAPACKE_cgetsls_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, _Complex float *a, int lda, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_cgetsls_work$address() {
        return LAPACKE_cgetsls_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, _Complex float *a, int lda, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_cgetsls_work(int matrix_layout, byte trans, int m, int n, int nrhs, MemorySegment a, int lda, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_cgetsls_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cgetsls_work", matrix_layout, trans, m, n, nrhs, a, lda, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zgetsls_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zgetsls_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, _Complex double *a, int lda, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zgetsls_work$descriptor() {
        return LAPACKE_zgetsls_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, _Complex double *a, int lda, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zgetsls_work$handle() {
        return LAPACKE_zgetsls_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, _Complex double *a, int lda, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zgetsls_work$address() {
        return LAPACKE_zgetsls_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zgetsls_work(int matrix_layout, char trans, int m, int n, int nrhs, _Complex double *a, int lda, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zgetsls_work(int matrix_layout, byte trans, int m, int n, int nrhs, MemorySegment a, int lda, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zgetsls_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zgetsls_work", matrix_layout, trans, m, n, nrhs, a, lda, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_sgetsqrhrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_sgetsqrhrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_sgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, float *a, int lda, float *t, int ldt)
     * }
     */
    public static FunctionDescriptor LAPACKE_sgetsqrhrt$descriptor() {
        return LAPACKE_sgetsqrhrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_sgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, float *a, int lda, float *t, int ldt)
     * }
     */
    public static MethodHandle LAPACKE_sgetsqrhrt$handle() {
        return LAPACKE_sgetsqrhrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_sgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, float *a, int lda, float *t, int ldt)
     * }
     */
    public static MemorySegment LAPACKE_sgetsqrhrt$address() {
        return LAPACKE_sgetsqrhrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_sgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, float *a, int lda, float *t, int ldt)
     * }
     */
    public static int LAPACKE_sgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, MemorySegment a, int lda, MemorySegment t, int ldt) {
        var mh$ = LAPACKE_sgetsqrhrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_sgetsqrhrt", matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dgetsqrhrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dgetsqrhrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, double *a, int lda, double *t, int ldt)
     * }
     */
    public static FunctionDescriptor LAPACKE_dgetsqrhrt$descriptor() {
        return LAPACKE_dgetsqrhrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, double *a, int lda, double *t, int ldt)
     * }
     */
    public static MethodHandle LAPACKE_dgetsqrhrt$handle() {
        return LAPACKE_dgetsqrhrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, double *a, int lda, double *t, int ldt)
     * }
     */
    public static MemorySegment LAPACKE_dgetsqrhrt$address() {
        return LAPACKE_dgetsqrhrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, double *a, int lda, double *t, int ldt)
     * }
     */
    public static int LAPACKE_dgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, MemorySegment a, int lda, MemorySegment t, int ldt) {
        var mh$ = LAPACKE_dgetsqrhrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dgetsqrhrt", matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cgetsqrhrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cgetsqrhrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex float *a, int lda, _Complex float *t, int ldt)
     * }
     */
    public static FunctionDescriptor LAPACKE_cgetsqrhrt$descriptor() {
        return LAPACKE_cgetsqrhrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex float *a, int lda, _Complex float *t, int ldt)
     * }
     */
    public static MethodHandle LAPACKE_cgetsqrhrt$handle() {
        return LAPACKE_cgetsqrhrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex float *a, int lda, _Complex float *t, int ldt)
     * }
     */
    public static MemorySegment LAPACKE_cgetsqrhrt$address() {
        return LAPACKE_cgetsqrhrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex float *a, int lda, _Complex float *t, int ldt)
     * }
     */
    public static int LAPACKE_cgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, MemorySegment a, int lda, MemorySegment t, int ldt) {
        var mh$ = LAPACKE_cgetsqrhrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cgetsqrhrt", matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zgetsqrhrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zgetsqrhrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex double *a, int lda, _Complex double *t, int ldt)
     * }
     */
    public static FunctionDescriptor LAPACKE_zgetsqrhrt$descriptor() {
        return LAPACKE_zgetsqrhrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex double *a, int lda, _Complex double *t, int ldt)
     * }
     */
    public static MethodHandle LAPACKE_zgetsqrhrt$handle() {
        return LAPACKE_zgetsqrhrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex double *a, int lda, _Complex double *t, int ldt)
     * }
     */
    public static MemorySegment LAPACKE_zgetsqrhrt$address() {
        return LAPACKE_zgetsqrhrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex double *a, int lda, _Complex double *t, int ldt)
     * }
     */
    public static int LAPACKE_zgetsqrhrt(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, MemorySegment a, int lda, MemorySegment t, int ldt) {
        var mh$ = LAPACKE_zgetsqrhrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zgetsqrhrt", matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_sgetsqrhrt_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_sgetsqrhrt_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_sgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, float *a, int lda, float *t, int ldt, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_sgetsqrhrt_work$descriptor() {
        return LAPACKE_sgetsqrhrt_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_sgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, float *a, int lda, float *t, int ldt, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_sgetsqrhrt_work$handle() {
        return LAPACKE_sgetsqrhrt_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_sgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, float *a, int lda, float *t, int ldt, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_sgetsqrhrt_work$address() {
        return LAPACKE_sgetsqrhrt_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_sgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, float *a, int lda, float *t, int ldt, float *work, int lwork)
     * }
     */
    public static int LAPACKE_sgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, MemorySegment a, int lda, MemorySegment t, int ldt, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_sgetsqrhrt_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_sgetsqrhrt_work", matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dgetsqrhrt_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dgetsqrhrt_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, double *a, int lda, double *t, int ldt, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dgetsqrhrt_work$descriptor() {
        return LAPACKE_dgetsqrhrt_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, double *a, int lda, double *t, int ldt, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dgetsqrhrt_work$handle() {
        return LAPACKE_dgetsqrhrt_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, double *a, int lda, double *t, int ldt, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dgetsqrhrt_work$address() {
        return LAPACKE_dgetsqrhrt_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, double *a, int lda, double *t, int ldt, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, MemorySegment a, int lda, MemorySegment t, int ldt, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dgetsqrhrt_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dgetsqrhrt_work", matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cgetsqrhrt_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cgetsqrhrt_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex float *a, int lda, _Complex float *t, int ldt, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_cgetsqrhrt_work$descriptor() {
        return LAPACKE_cgetsqrhrt_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex float *a, int lda, _Complex float *t, int ldt, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_cgetsqrhrt_work$handle() {
        return LAPACKE_cgetsqrhrt_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex float *a, int lda, _Complex float *t, int ldt, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_cgetsqrhrt_work$address() {
        return LAPACKE_cgetsqrhrt_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex float *a, int lda, _Complex float *t, int ldt, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_cgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, MemorySegment a, int lda, MemorySegment t, int ldt, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_cgetsqrhrt_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cgetsqrhrt_work", matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zgetsqrhrt_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zgetsqrhrt_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex double *a, int lda, _Complex double *t, int ldt, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zgetsqrhrt_work$descriptor() {
        return LAPACKE_zgetsqrhrt_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex double *a, int lda, _Complex double *t, int ldt, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zgetsqrhrt_work$handle() {
        return LAPACKE_zgetsqrhrt_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex double *a, int lda, _Complex double *t, int ldt, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zgetsqrhrt_work$address() {
        return LAPACKE_zgetsqrhrt_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, _Complex double *a, int lda, _Complex double *t, int ldt, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zgetsqrhrt_work(int matrix_layout, int m, int n, int mb1, int nb1, int nb2, MemorySegment a, int lda, MemorySegment t, int ldt, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zgetsqrhrt_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zgetsqrhrt_work", matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssyev_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssyev_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssyev_2stage(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssyev_2stage$descriptor() {
        return LAPACKE_ssyev_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssyev_2stage(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w)
     * }
     */
    public static MethodHandle LAPACKE_ssyev_2stage$handle() {
        return LAPACKE_ssyev_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssyev_2stage(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w)
     * }
     */
    public static MemorySegment LAPACKE_ssyev_2stage$address() {
        return LAPACKE_ssyev_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssyev_2stage(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w)
     * }
     */
    public static int LAPACKE_ssyev_2stage(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w) {
        var mh$ = LAPACKE_ssyev_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssyev_2stage", matrix_layout, jobz, uplo, n, a, lda, w);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsyev_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsyev_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsyev_2stage(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsyev_2stage$descriptor() {
        return LAPACKE_dsyev_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsyev_2stage(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w)
     * }
     */
    public static MethodHandle LAPACKE_dsyev_2stage$handle() {
        return LAPACKE_dsyev_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsyev_2stage(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w)
     * }
     */
    public static MemorySegment LAPACKE_dsyev_2stage$address() {
        return LAPACKE_dsyev_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsyev_2stage(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w)
     * }
     */
    public static int LAPACKE_dsyev_2stage(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w) {
        var mh$ = LAPACKE_dsyev_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsyev_2stage", matrix_layout, jobz, uplo, n, a, lda, w);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssyevd_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssyevd_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevd_2stage(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssyevd_2stage$descriptor() {
        return LAPACKE_ssyevd_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevd_2stage(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w)
     * }
     */
    public static MethodHandle LAPACKE_ssyevd_2stage$handle() {
        return LAPACKE_ssyevd_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevd_2stage(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w)
     * }
     */
    public static MemorySegment LAPACKE_ssyevd_2stage$address() {
        return LAPACKE_ssyevd_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssyevd_2stage(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w)
     * }
     */
    public static int LAPACKE_ssyevd_2stage(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w) {
        var mh$ = LAPACKE_ssyevd_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssyevd_2stage", matrix_layout, jobz, uplo, n, a, lda, w);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsyevd_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsyevd_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevd_2stage(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsyevd_2stage$descriptor() {
        return LAPACKE_dsyevd_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevd_2stage(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w)
     * }
     */
    public static MethodHandle LAPACKE_dsyevd_2stage$handle() {
        return LAPACKE_dsyevd_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevd_2stage(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w)
     * }
     */
    public static MemorySegment LAPACKE_dsyevd_2stage$address() {
        return LAPACKE_dsyevd_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsyevd_2stage(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w)
     * }
     */
    public static int LAPACKE_dsyevd_2stage(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w) {
        var mh$ = LAPACKE_dsyevd_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsyevd_2stage", matrix_layout, jobz, uplo, n, a, lda, w);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssyevr_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssyevr_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *isuppz)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssyevr_2stage$descriptor() {
        return LAPACKE_ssyevr_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *isuppz)
     * }
     */
    public static MethodHandle LAPACKE_ssyevr_2stage$handle() {
        return LAPACKE_ssyevr_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *isuppz)
     * }
     */
    public static MemorySegment LAPACKE_ssyevr_2stage$address() {
        return LAPACKE_ssyevr_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssyevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *isuppz)
     * }
     */
    public static int LAPACKE_ssyevr_2stage(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, float vl, float vu, int il, int iu, float abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment isuppz) {
        var mh$ = LAPACKE_ssyevr_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssyevr_2stage", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsyevr_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsyevr_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *isuppz)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsyevr_2stage$descriptor() {
        return LAPACKE_dsyevr_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *isuppz)
     * }
     */
    public static MethodHandle LAPACKE_dsyevr_2stage$handle() {
        return LAPACKE_dsyevr_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *isuppz)
     * }
     */
    public static MemorySegment LAPACKE_dsyevr_2stage$address() {
        return LAPACKE_dsyevr_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsyevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *isuppz)
     * }
     */
    public static int LAPACKE_dsyevr_2stage(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, double vl, double vu, int il, int iu, double abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment isuppz) {
        var mh$ = LAPACKE_dsyevr_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsyevr_2stage", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssyevx_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssyevx_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssyevx_2stage$descriptor() {
        return LAPACKE_ssyevx_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_ssyevx_2stage$handle() {
        return LAPACKE_ssyevx_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_ssyevx_2stage$address() {
        return LAPACKE_ssyevx_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssyevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *ifail)
     * }
     */
    public static int LAPACKE_ssyevx_2stage(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, float vl, float vu, int il, int iu, float abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment ifail) {
        var mh$ = LAPACKE_ssyevx_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssyevx_2stage", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsyevx_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsyevx_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsyevx_2stage$descriptor() {
        return LAPACKE_dsyevx_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_dsyevx_2stage$handle() {
        return LAPACKE_dsyevx_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_dsyevx_2stage$address() {
        return LAPACKE_dsyevx_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsyevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *ifail)
     * }
     */
    public static int LAPACKE_dsyevx_2stage(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, double vl, double vu, int il, int iu, double abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment ifail) {
        var mh$ = LAPACKE_dsyevx_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsyevx_2stage", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssyev_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssyev_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssyev_2stage_work(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssyev_2stage_work$descriptor() {
        return LAPACKE_ssyev_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssyev_2stage_work(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_ssyev_2stage_work$handle() {
        return LAPACKE_ssyev_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssyev_2stage_work(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_ssyev_2stage_work$address() {
        return LAPACKE_ssyev_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssyev_2stage_work(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w, float *work, int lwork)
     * }
     */
    public static int LAPACKE_ssyev_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_ssyev_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssyev_2stage_work", matrix_layout, jobz, uplo, n, a, lda, w, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsyev_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsyev_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsyev_2stage_work(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsyev_2stage_work$descriptor() {
        return LAPACKE_dsyev_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsyev_2stage_work(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dsyev_2stage_work$handle() {
        return LAPACKE_dsyev_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsyev_2stage_work(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dsyev_2stage_work$address() {
        return LAPACKE_dsyev_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsyev_2stage_work(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dsyev_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dsyev_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsyev_2stage_work", matrix_layout, jobz, uplo, n, a, lda, w, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssyevd_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssyevd_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w, float *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssyevd_2stage_work$descriptor() {
        return LAPACKE_ssyevd_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w, float *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static MethodHandle LAPACKE_ssyevd_2stage_work$handle() {
        return LAPACKE_ssyevd_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w, float *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static MemorySegment LAPACKE_ssyevd_2stage_work$address() {
        return LAPACKE_ssyevd_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssyevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, float *a, int lda, float *w, float *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static int LAPACKE_ssyevd_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w, MemorySegment work, int lwork, MemorySegment iwork, int liwork) {
        var mh$ = LAPACKE_ssyevd_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssyevd_2stage_work", matrix_layout, jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsyevd_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsyevd_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w, double *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsyevd_2stage_work$descriptor() {
        return LAPACKE_dsyevd_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w, double *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static MethodHandle LAPACKE_dsyevd_2stage_work$handle() {
        return LAPACKE_dsyevd_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w, double *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static MemorySegment LAPACKE_dsyevd_2stage_work$address() {
        return LAPACKE_dsyevd_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsyevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, double *a, int lda, double *w, double *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static int LAPACKE_dsyevd_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w, MemorySegment work, int lwork, MemorySegment iwork, int liwork) {
        var mh$ = LAPACKE_dsyevd_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsyevd_2stage_work", matrix_layout, jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssyevr_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssyevr_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *isuppz, float *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssyevr_2stage_work$descriptor() {
        return LAPACKE_ssyevr_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *isuppz, float *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static MethodHandle LAPACKE_ssyevr_2stage_work$handle() {
        return LAPACKE_ssyevr_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *isuppz, float *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static MemorySegment LAPACKE_ssyevr_2stage_work$address() {
        return LAPACKE_ssyevr_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssyevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *isuppz, float *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static int LAPACKE_ssyevr_2stage_work(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, float vl, float vu, int il, int iu, float abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment isuppz, MemorySegment work, int lwork, MemorySegment iwork, int liwork) {
        var mh$ = LAPACKE_ssyevr_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssyevr_2stage_work", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsyevr_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsyevr_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *isuppz, double *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsyevr_2stage_work$descriptor() {
        return LAPACKE_dsyevr_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *isuppz, double *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static MethodHandle LAPACKE_dsyevr_2stage_work$handle() {
        return LAPACKE_dsyevr_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *isuppz, double *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static MemorySegment LAPACKE_dsyevr_2stage_work$address() {
        return LAPACKE_dsyevr_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsyevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *isuppz, double *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static int LAPACKE_dsyevr_2stage_work(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, double vl, double vu, int il, int iu, double abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment isuppz, MemorySegment work, int lwork, MemorySegment iwork, int liwork) {
        var mh$ = LAPACKE_dsyevr_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsyevr_2stage_work", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssyevx_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssyevx_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, float *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssyevx_2stage_work$descriptor() {
        return LAPACKE_ssyevx_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, float *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_ssyevx_2stage_work$handle() {
        return LAPACKE_ssyevx_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssyevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, float *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_ssyevx_2stage_work$address() {
        return LAPACKE_ssyevx_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssyevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, float *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static int LAPACKE_ssyevx_2stage_work(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, float vl, float vu, int il, int iu, float abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment iwork, MemorySegment ifail) {
        var mh$ = LAPACKE_ssyevx_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssyevx_2stage_work", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsyevx_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsyevx_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, double *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsyevx_2stage_work$descriptor() {
        return LAPACKE_dsyevx_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, double *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_dsyevx_2stage_work$handle() {
        return LAPACKE_dsyevx_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsyevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, double *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_dsyevx_2stage_work$address() {
        return LAPACKE_dsyevx_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsyevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, double *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static int LAPACKE_dsyevx_2stage_work(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, double vl, double vu, int il, int iu, double abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment iwork, MemorySegment ifail) {
        var mh$ = LAPACKE_dsyevx_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsyevx_2stage_work", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cheev_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cheev_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cheev_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w)
     * }
     */
    public static FunctionDescriptor LAPACKE_cheev_2stage$descriptor() {
        return LAPACKE_cheev_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cheev_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w)
     * }
     */
    public static MethodHandle LAPACKE_cheev_2stage$handle() {
        return LAPACKE_cheev_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cheev_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w)
     * }
     */
    public static MemorySegment LAPACKE_cheev_2stage$address() {
        return LAPACKE_cheev_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cheev_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w)
     * }
     */
    public static int LAPACKE_cheev_2stage(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w) {
        var mh$ = LAPACKE_cheev_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cheev_2stage", matrix_layout, jobz, uplo, n, a, lda, w);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zheev_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zheev_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zheev_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w)
     * }
     */
    public static FunctionDescriptor LAPACKE_zheev_2stage$descriptor() {
        return LAPACKE_zheev_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zheev_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w)
     * }
     */
    public static MethodHandle LAPACKE_zheev_2stage$handle() {
        return LAPACKE_zheev_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zheev_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w)
     * }
     */
    public static MemorySegment LAPACKE_zheev_2stage$address() {
        return LAPACKE_zheev_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zheev_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w)
     * }
     */
    public static int LAPACKE_zheev_2stage(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w) {
        var mh$ = LAPACKE_zheev_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zheev_2stage", matrix_layout, jobz, uplo, n, a, lda, w);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cheevd_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cheevd_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cheevd_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w)
     * }
     */
    public static FunctionDescriptor LAPACKE_cheevd_2stage$descriptor() {
        return LAPACKE_cheevd_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cheevd_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w)
     * }
     */
    public static MethodHandle LAPACKE_cheevd_2stage$handle() {
        return LAPACKE_cheevd_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cheevd_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w)
     * }
     */
    public static MemorySegment LAPACKE_cheevd_2stage$address() {
        return LAPACKE_cheevd_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cheevd_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w)
     * }
     */
    public static int LAPACKE_cheevd_2stage(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w) {
        var mh$ = LAPACKE_cheevd_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cheevd_2stage", matrix_layout, jobz, uplo, n, a, lda, w);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zheevd_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zheevd_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zheevd_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w)
     * }
     */
    public static FunctionDescriptor LAPACKE_zheevd_2stage$descriptor() {
        return LAPACKE_zheevd_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zheevd_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w)
     * }
     */
    public static MethodHandle LAPACKE_zheevd_2stage$handle() {
        return LAPACKE_zheevd_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zheevd_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w)
     * }
     */
    public static MemorySegment LAPACKE_zheevd_2stage$address() {
        return LAPACKE_zheevd_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zheevd_2stage(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w)
     * }
     */
    public static int LAPACKE_zheevd_2stage(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w) {
        var mh$ = LAPACKE_zheevd_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zheevd_2stage", matrix_layout, jobz, uplo, n, a, lda, w);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cheevr_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cheevr_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cheevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *isuppz)
     * }
     */
    public static FunctionDescriptor LAPACKE_cheevr_2stage$descriptor() {
        return LAPACKE_cheevr_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cheevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *isuppz)
     * }
     */
    public static MethodHandle LAPACKE_cheevr_2stage$handle() {
        return LAPACKE_cheevr_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cheevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *isuppz)
     * }
     */
    public static MemorySegment LAPACKE_cheevr_2stage$address() {
        return LAPACKE_cheevr_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cheevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *isuppz)
     * }
     */
    public static int LAPACKE_cheevr_2stage(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, float vl, float vu, int il, int iu, float abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment isuppz) {
        var mh$ = LAPACKE_cheevr_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cheevr_2stage", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zheevr_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zheevr_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zheevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *isuppz)
     * }
     */
    public static FunctionDescriptor LAPACKE_zheevr_2stage$descriptor() {
        return LAPACKE_zheevr_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zheevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *isuppz)
     * }
     */
    public static MethodHandle LAPACKE_zheevr_2stage$handle() {
        return LAPACKE_zheevr_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zheevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *isuppz)
     * }
     */
    public static MemorySegment LAPACKE_zheevr_2stage$address() {
        return LAPACKE_zheevr_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zheevr_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *isuppz)
     * }
     */
    public static int LAPACKE_zheevr_2stage(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, double vl, double vu, int il, int iu, double abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment isuppz) {
        var mh$ = LAPACKE_zheevr_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zheevr_2stage", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cheevx_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cheevx_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cheevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_cheevx_2stage$descriptor() {
        return LAPACKE_cheevx_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cheevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_cheevx_2stage$handle() {
        return LAPACKE_cheevx_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cheevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_cheevx_2stage$address() {
        return LAPACKE_cheevx_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cheevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *ifail)
     * }
     */
    public static int LAPACKE_cheevx_2stage(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, float vl, float vu, int il, int iu, float abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment ifail) {
        var mh$ = LAPACKE_cheevx_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cheevx_2stage", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zheevx_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zheevx_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zheevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_zheevx_2stage$descriptor() {
        return LAPACKE_zheevx_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zheevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_zheevx_2stage$handle() {
        return LAPACKE_zheevx_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zheevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_zheevx_2stage$address() {
        return LAPACKE_zheevx_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zheevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *ifail)
     * }
     */
    public static int LAPACKE_zheevx_2stage(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, double vl, double vu, int il, int iu, double abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment ifail) {
        var mh$ = LAPACKE_zheevx_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zheevx_2stage", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cheev_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cheev_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cheev_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w, _Complex float *work, int lwork, float *rwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_cheev_2stage_work$descriptor() {
        return LAPACKE_cheev_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cheev_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w, _Complex float *work, int lwork, float *rwork)
     * }
     */
    public static MethodHandle LAPACKE_cheev_2stage_work$handle() {
        return LAPACKE_cheev_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cheev_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w, _Complex float *work, int lwork, float *rwork)
     * }
     */
    public static MemorySegment LAPACKE_cheev_2stage_work$address() {
        return LAPACKE_cheev_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cheev_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w, _Complex float *work, int lwork, float *rwork)
     * }
     */
    public static int LAPACKE_cheev_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w, MemorySegment work, int lwork, MemorySegment rwork) {
        var mh$ = LAPACKE_cheev_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cheev_2stage_work", matrix_layout, jobz, uplo, n, a, lda, w, work, lwork, rwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w, work, lwork, rwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zheev_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zheev_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zheev_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w, _Complex double *work, int lwork, double *rwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zheev_2stage_work$descriptor() {
        return LAPACKE_zheev_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zheev_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w, _Complex double *work, int lwork, double *rwork)
     * }
     */
    public static MethodHandle LAPACKE_zheev_2stage_work$handle() {
        return LAPACKE_zheev_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zheev_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w, _Complex double *work, int lwork, double *rwork)
     * }
     */
    public static MemorySegment LAPACKE_zheev_2stage_work$address() {
        return LAPACKE_zheev_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zheev_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w, _Complex double *work, int lwork, double *rwork)
     * }
     */
    public static int LAPACKE_zheev_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w, MemorySegment work, int lwork, MemorySegment rwork) {
        var mh$ = LAPACKE_zheev_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zheev_2stage_work", matrix_layout, jobz, uplo, n, a, lda, w, work, lwork, rwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w, work, lwork, rwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cheevd_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cheevd_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cheevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w, _Complex float *work, int lwork, float *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_cheevd_2stage_work$descriptor() {
        return LAPACKE_cheevd_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cheevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w, _Complex float *work, int lwork, float *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static MethodHandle LAPACKE_cheevd_2stage_work$handle() {
        return LAPACKE_cheevd_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cheevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w, _Complex float *work, int lwork, float *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static MemorySegment LAPACKE_cheevd_2stage_work$address() {
        return LAPACKE_cheevd_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cheevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex float *a, int lda, float *w, _Complex float *work, int lwork, float *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static int LAPACKE_cheevd_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w, MemorySegment work, int lwork, MemorySegment rwork, int lrwork, MemorySegment iwork, int liwork) {
        var mh$ = LAPACKE_cheevd_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cheevd_2stage_work", matrix_layout, jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zheevd_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zheevd_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zheevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w, _Complex double *work, int lwork, double *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zheevd_2stage_work$descriptor() {
        return LAPACKE_zheevd_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zheevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w, _Complex double *work, int lwork, double *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static MethodHandle LAPACKE_zheevd_2stage_work$handle() {
        return LAPACKE_zheevd_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zheevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w, _Complex double *work, int lwork, double *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static MemorySegment LAPACKE_zheevd_2stage_work$address() {
        return LAPACKE_zheevd_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zheevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, _Complex double *a, int lda, double *w, _Complex double *work, int lwork, double *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static int LAPACKE_zheevd_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment w, MemorySegment work, int lwork, MemorySegment rwork, int lrwork, MemorySegment iwork, int liwork) {
        var mh$ = LAPACKE_zheevd_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zheevd_2stage_work", matrix_layout, jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cheevr_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cheevr_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cheevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *isuppz, _Complex float *work, int lwork, float *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_cheevr_2stage_work$descriptor() {
        return LAPACKE_cheevr_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cheevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *isuppz, _Complex float *work, int lwork, float *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static MethodHandle LAPACKE_cheevr_2stage_work$handle() {
        return LAPACKE_cheevr_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cheevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *isuppz, _Complex float *work, int lwork, float *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static MemorySegment LAPACKE_cheevr_2stage_work$address() {
        return LAPACKE_cheevr_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cheevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *isuppz, _Complex float *work, int lwork, float *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static int LAPACKE_cheevr_2stage_work(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, float vl, float vu, int il, int iu, float abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment isuppz, MemorySegment work, int lwork, MemorySegment rwork, int lrwork, MemorySegment iwork, int liwork) {
        var mh$ = LAPACKE_cheevr_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cheevr_2stage_work", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zheevr_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zheevr_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zheevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *isuppz, _Complex double *work, int lwork, double *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zheevr_2stage_work$descriptor() {
        return LAPACKE_zheevr_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zheevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *isuppz, _Complex double *work, int lwork, double *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static MethodHandle LAPACKE_zheevr_2stage_work$handle() {
        return LAPACKE_zheevr_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zheevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *isuppz, _Complex double *work, int lwork, double *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static MemorySegment LAPACKE_zheevr_2stage_work$address() {
        return LAPACKE_zheevr_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zheevr_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *isuppz, _Complex double *work, int lwork, double *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static int LAPACKE_zheevr_2stage_work(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, double vl, double vu, int il, int iu, double abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment isuppz, MemorySegment work, int lwork, MemorySegment rwork, int lrwork, MemorySegment iwork, int liwork) {
        var mh$ = LAPACKE_zheevr_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zheevr_2stage_work", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_cheevx_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_cheevx_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_cheevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork, int *iwork, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_cheevx_2stage_work$descriptor() {
        return LAPACKE_cheevx_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_cheevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork, int *iwork, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_cheevx_2stage_work$handle() {
        return LAPACKE_cheevx_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_cheevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork, int *iwork, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_cheevx_2stage_work$address() {
        return LAPACKE_cheevx_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_cheevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork, int *iwork, int *ifail)
     * }
     */
    public static int LAPACKE_cheevx_2stage_work(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, float vl, float vu, int il, int iu, float abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment rwork, MemorySegment iwork, MemorySegment ifail) {
        var mh$ = LAPACKE_cheevx_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_cheevx_2stage_work", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zheevx_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zheevx_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zheevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork, int *iwork, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_zheevx_2stage_work$descriptor() {
        return LAPACKE_zheevx_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zheevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork, int *iwork, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_zheevx_2stage_work$handle() {
        return LAPACKE_zheevx_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zheevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork, int *iwork, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_zheevx_2stage_work$address() {
        return LAPACKE_zheevx_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zheevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, _Complex double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork, int *iwork, int *ifail)
     * }
     */
    public static int LAPACKE_zheevx_2stage_work(int matrix_layout, byte jobz, byte range, byte uplo, int n, MemorySegment a, int lda, double vl, double vu, int il, int iu, double abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment rwork, MemorySegment iwork, MemorySegment ifail) {
        var mh$ = LAPACKE_zheevx_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zheevx_2stage_work", matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssbev_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssbev_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssbev_2stage$descriptor() {
        return LAPACKE_ssbev_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz)
     * }
     */
    public static MethodHandle LAPACKE_ssbev_2stage$handle() {
        return LAPACKE_ssbev_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz)
     * }
     */
    public static MemorySegment LAPACKE_ssbev_2stage$address() {
        return LAPACKE_ssbev_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz)
     * }
     */
    public static int LAPACKE_ssbev_2stage(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz) {
        var mh$ = LAPACKE_ssbev_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssbev_2stage", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsbev_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsbev_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsbev_2stage$descriptor() {
        return LAPACKE_dsbev_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz)
     * }
     */
    public static MethodHandle LAPACKE_dsbev_2stage$handle() {
        return LAPACKE_dsbev_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz)
     * }
     */
    public static MemorySegment LAPACKE_dsbev_2stage$address() {
        return LAPACKE_dsbev_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz)
     * }
     */
    public static int LAPACKE_dsbev_2stage(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz) {
        var mh$ = LAPACKE_dsbev_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsbev_2stage", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssbevd_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssbevd_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssbevd_2stage$descriptor() {
        return LAPACKE_ssbevd_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz)
     * }
     */
    public static MethodHandle LAPACKE_ssbevd_2stage$handle() {
        return LAPACKE_ssbevd_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz)
     * }
     */
    public static MemorySegment LAPACKE_ssbevd_2stage$address() {
        return LAPACKE_ssbevd_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz)
     * }
     */
    public static int LAPACKE_ssbevd_2stage(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz) {
        var mh$ = LAPACKE_ssbevd_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssbevd_2stage", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsbevd_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsbevd_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsbevd_2stage$descriptor() {
        return LAPACKE_dsbevd_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz)
     * }
     */
    public static MethodHandle LAPACKE_dsbevd_2stage$handle() {
        return LAPACKE_dsbevd_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz)
     * }
     */
    public static MemorySegment LAPACKE_dsbevd_2stage$address() {
        return LAPACKE_dsbevd_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz)
     * }
     */
    public static int LAPACKE_dsbevd_2stage(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz) {
        var mh$ = LAPACKE_dsbevd_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsbevd_2stage", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssbevx_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssbevx_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, float *ab, int ldab, float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssbevx_2stage$descriptor() {
        return LAPACKE_ssbevx_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, float *ab, int ldab, float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_ssbevx_2stage$handle() {
        return LAPACKE_ssbevx_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, float *ab, int ldab, float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_ssbevx_2stage$address() {
        return LAPACKE_ssbevx_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, float *ab, int ldab, float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *ifail)
     * }
     */
    public static int LAPACKE_ssbevx_2stage(int matrix_layout, byte jobz, byte range, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment q, int ldq, float vl, float vu, int il, int iu, float abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment ifail) {
        var mh$ = LAPACKE_ssbevx_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssbevx_2stage", matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsbevx_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsbevx_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, double *ab, int ldab, double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsbevx_2stage$descriptor() {
        return LAPACKE_dsbevx_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, double *ab, int ldab, double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_dsbevx_2stage$handle() {
        return LAPACKE_dsbevx_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, double *ab, int ldab, double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_dsbevx_2stage$address() {
        return LAPACKE_dsbevx_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, double *ab, int ldab, double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *ifail)
     * }
     */
    public static int LAPACKE_dsbevx_2stage(int matrix_layout, byte jobz, byte range, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment q, int ldq, double vl, double vu, int il, int iu, double abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment ifail) {
        var mh$ = LAPACKE_dsbevx_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsbevx_2stage", matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssbev_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssbev_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssbev_2stage_work$descriptor() {
        return LAPACKE_ssbev_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_ssbev_2stage_work$handle() {
        return LAPACKE_ssbev_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_ssbev_2stage_work$address() {
        return LAPACKE_ssbev_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz, float *work, int lwork)
     * }
     */
    public static int LAPACKE_ssbev_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_ssbev_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssbev_2stage_work", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsbev_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsbev_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsbev_2stage_work$descriptor() {
        return LAPACKE_dsbev_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dsbev_2stage_work$handle() {
        return LAPACKE_dsbev_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dsbev_2stage_work$address() {
        return LAPACKE_dsbev_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dsbev_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dsbev_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsbev_2stage_work", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssbevd_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssbevd_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz, float *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssbevd_2stage_work$descriptor() {
        return LAPACKE_ssbevd_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz, float *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static MethodHandle LAPACKE_ssbevd_2stage_work$handle() {
        return LAPACKE_ssbevd_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz, float *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static MemorySegment LAPACKE_ssbevd_2stage_work$address() {
        return LAPACKE_ssbevd_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz, float *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static int LAPACKE_ssbevd_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment iwork, int liwork) {
        var mh$ = LAPACKE_ssbevd_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssbevd_2stage_work", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsbevd_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsbevd_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz, double *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsbevd_2stage_work$descriptor() {
        return LAPACKE_dsbevd_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz, double *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static MethodHandle LAPACKE_dsbevd_2stage_work$handle() {
        return LAPACKE_dsbevd_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz, double *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static MemorySegment LAPACKE_dsbevd_2stage_work$address() {
        return LAPACKE_dsbevd_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz, double *work, int lwork, int *iwork, int liwork)
     * }
     */
    public static int LAPACKE_dsbevd_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment iwork, int liwork) {
        var mh$ = LAPACKE_dsbevd_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsbevd_2stage_work", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssbevx_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssbevx_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, float *ab, int ldab, float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, float *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssbevx_2stage_work$descriptor() {
        return LAPACKE_ssbevx_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, float *ab, int ldab, float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, float *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_ssbevx_2stage_work$handle() {
        return LAPACKE_ssbevx_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, float *ab, int ldab, float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, float *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_ssbevx_2stage_work$address() {
        return LAPACKE_ssbevx_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, float *ab, int ldab, float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, float *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static int LAPACKE_ssbevx_2stage_work(int matrix_layout, byte jobz, byte range, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment q, int ldq, float vl, float vu, int il, int iu, float abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment iwork, MemorySegment ifail) {
        var mh$ = LAPACKE_ssbevx_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssbevx_2stage_work", matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsbevx_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsbevx_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, double *ab, int ldab, double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, double *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsbevx_2stage_work$descriptor() {
        return LAPACKE_dsbevx_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, double *ab, int ldab, double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, double *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_dsbevx_2stage_work$handle() {
        return LAPACKE_dsbevx_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, double *ab, int ldab, double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, double *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_dsbevx_2stage_work$address() {
        return LAPACKE_dsbevx_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, double *ab, int ldab, double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, double *work, int lwork, int *iwork, int *ifail)
     * }
     */
    public static int LAPACKE_dsbevx_2stage_work(int matrix_layout, byte jobz, byte range, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment q, int ldq, double vl, double vu, int il, int iu, double abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment iwork, MemorySegment ifail) {
        var mh$ = LAPACKE_dsbevx_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsbevx_2stage_work", matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chbev_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chbev_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz)
     * }
     */
    public static FunctionDescriptor LAPACKE_chbev_2stage$descriptor() {
        return LAPACKE_chbev_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz)
     * }
     */
    public static MethodHandle LAPACKE_chbev_2stage$handle() {
        return LAPACKE_chbev_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz)
     * }
     */
    public static MemorySegment LAPACKE_chbev_2stage$address() {
        return LAPACKE_chbev_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz)
     * }
     */
    public static int LAPACKE_chbev_2stage(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz) {
        var mh$ = LAPACKE_chbev_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chbev_2stage", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhbev_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhbev_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhbev_2stage$descriptor() {
        return LAPACKE_zhbev_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz)
     * }
     */
    public static MethodHandle LAPACKE_zhbev_2stage$handle() {
        return LAPACKE_zhbev_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz)
     * }
     */
    public static MemorySegment LAPACKE_zhbev_2stage$address() {
        return LAPACKE_zhbev_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhbev_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz)
     * }
     */
    public static int LAPACKE_zhbev_2stage(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz) {
        var mh$ = LAPACKE_zhbev_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhbev_2stage", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chbevd_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chbevd_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz)
     * }
     */
    public static FunctionDescriptor LAPACKE_chbevd_2stage$descriptor() {
        return LAPACKE_chbevd_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz)
     * }
     */
    public static MethodHandle LAPACKE_chbevd_2stage$handle() {
        return LAPACKE_chbevd_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz)
     * }
     */
    public static MemorySegment LAPACKE_chbevd_2stage$address() {
        return LAPACKE_chbevd_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz)
     * }
     */
    public static int LAPACKE_chbevd_2stage(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz) {
        var mh$ = LAPACKE_chbevd_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chbevd_2stage", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhbevd_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhbevd_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhbevd_2stage$descriptor() {
        return LAPACKE_zhbevd_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz)
     * }
     */
    public static MethodHandle LAPACKE_zhbevd_2stage$handle() {
        return LAPACKE_zhbevd_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz)
     * }
     */
    public static MemorySegment LAPACKE_zhbevd_2stage$address() {
        return LAPACKE_zhbevd_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhbevd_2stage(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz)
     * }
     */
    public static int LAPACKE_zhbevd_2stage(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz) {
        var mh$ = LAPACKE_zhbevd_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhbevd_2stage", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chbevx_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chbevx_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex float *ab, int ldab, _Complex float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_chbevx_2stage$descriptor() {
        return LAPACKE_chbevx_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex float *ab, int ldab, _Complex float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_chbevx_2stage$handle() {
        return LAPACKE_chbevx_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex float *ab, int ldab, _Complex float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_chbevx_2stage$address() {
        return LAPACKE_chbevx_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex float *ab, int ldab, _Complex float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, int *ifail)
     * }
     */
    public static int LAPACKE_chbevx_2stage(int matrix_layout, byte jobz, byte range, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment q, int ldq, float vl, float vu, int il, int iu, float abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment ifail) {
        var mh$ = LAPACKE_chbevx_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chbevx_2stage", matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhbevx_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhbevx_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex double *ab, int ldab, _Complex double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhbevx_2stage$descriptor() {
        return LAPACKE_zhbevx_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex double *ab, int ldab, _Complex double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_zhbevx_2stage$handle() {
        return LAPACKE_zhbevx_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex double *ab, int ldab, _Complex double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_zhbevx_2stage$address() {
        return LAPACKE_zhbevx_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhbevx_2stage(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex double *ab, int ldab, _Complex double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, int *ifail)
     * }
     */
    public static int LAPACKE_zhbevx_2stage(int matrix_layout, byte jobz, byte range, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment q, int ldq, double vl, double vu, int il, int iu, double abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment ifail) {
        var mh$ = LAPACKE_zhbevx_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhbevx_2stage", matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chbev_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chbev_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_chbev_2stage_work$descriptor() {
        return LAPACKE_chbev_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork)
     * }
     */
    public static MethodHandle LAPACKE_chbev_2stage_work$handle() {
        return LAPACKE_chbev_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork)
     * }
     */
    public static MemorySegment LAPACKE_chbev_2stage_work$address() {
        return LAPACKE_chbev_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork)
     * }
     */
    public static int LAPACKE_chbev_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment rwork) {
        var mh$ = LAPACKE_chbev_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chbev_2stage_work", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhbev_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhbev_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhbev_2stage_work$descriptor() {
        return LAPACKE_zhbev_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork)
     * }
     */
    public static MethodHandle LAPACKE_zhbev_2stage_work$handle() {
        return LAPACKE_zhbev_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork)
     * }
     */
    public static MemorySegment LAPACKE_zhbev_2stage_work$address() {
        return LAPACKE_zhbev_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhbev_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork)
     * }
     */
    public static int LAPACKE_zhbev_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment rwork) {
        var mh$ = LAPACKE_zhbev_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhbev_2stage_work", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chbevd_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chbevd_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_chbevd_2stage_work$descriptor() {
        return LAPACKE_chbevd_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static MethodHandle LAPACKE_chbevd_2stage_work$handle() {
        return LAPACKE_chbevd_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static MemorySegment LAPACKE_chbevd_2stage_work$address() {
        return LAPACKE_chbevd_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex float *ab, int ldab, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static int LAPACKE_chbevd_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment rwork, int lrwork, MemorySegment iwork, int liwork) {
        var mh$ = LAPACKE_chbevd_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chbevd_2stage_work", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhbevd_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhbevd_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhbevd_2stage_work$descriptor() {
        return LAPACKE_zhbevd_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static MethodHandle LAPACKE_zhbevd_2stage_work$handle() {
        return LAPACKE_zhbevd_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static MemorySegment LAPACKE_zhbevd_2stage_work$address() {
        return LAPACKE_zhbevd_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhbevd_2stage_work(int matrix_layout, char jobz, char uplo, int n, int kd, _Complex double *ab, int ldab, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork, int lrwork, int *iwork, int liwork)
     * }
     */
    public static int LAPACKE_zhbevd_2stage_work(int matrix_layout, byte jobz, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment rwork, int lrwork, MemorySegment iwork, int liwork) {
        var mh$ = LAPACKE_zhbevd_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhbevd_2stage_work", matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chbevx_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_FLOAT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chbevx_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex float *ab, int ldab, _Complex float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork, int *iwork, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_chbevx_2stage_work$descriptor() {
        return LAPACKE_chbevx_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex float *ab, int ldab, _Complex float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork, int *iwork, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_chbevx_2stage_work$handle() {
        return LAPACKE_chbevx_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex float *ab, int ldab, _Complex float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork, int *iwork, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_chbevx_2stage_work$address() {
        return LAPACKE_chbevx_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex float *ab, int ldab, _Complex float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, _Complex float *z, int ldz, _Complex float *work, int lwork, float *rwork, int *iwork, int *ifail)
     * }
     */
    public static int LAPACKE_chbevx_2stage_work(int matrix_layout, byte jobz, byte range, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment q, int ldq, float vl, float vu, int il, int iu, float abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment rwork, MemorySegment iwork, MemorySegment ifail) {
        var mh$ = LAPACKE_chbevx_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chbevx_2stage_work", matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhbevx_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_DOUBLE,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhbevx_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex double *ab, int ldab, _Complex double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork, int *iwork, int *ifail)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhbevx_2stage_work$descriptor() {
        return LAPACKE_zhbevx_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex double *ab, int ldab, _Complex double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork, int *iwork, int *ifail)
     * }
     */
    public static MethodHandle LAPACKE_zhbevx_2stage_work$handle() {
        return LAPACKE_zhbevx_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex double *ab, int ldab, _Complex double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork, int *iwork, int *ifail)
     * }
     */
    public static MemorySegment LAPACKE_zhbevx_2stage_work$address() {
        return LAPACKE_zhbevx_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhbevx_2stage_work(int matrix_layout, char jobz, char range, char uplo, int n, int kd, _Complex double *ab, int ldab, _Complex double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, _Complex double *z, int ldz, _Complex double *work, int lwork, double *rwork, int *iwork, int *ifail)
     * }
     */
    public static int LAPACKE_zhbevx_2stage_work(int matrix_layout, byte jobz, byte range, byte uplo, int n, int kd, MemorySegment ab, int ldab, MemorySegment q, int ldq, double vl, double vu, int il, int iu, double abstol, MemorySegment m, MemorySegment w, MemorySegment z, int ldz, MemorySegment work, int lwork, MemorySegment rwork, MemorySegment iwork, MemorySegment ifail) {
        var mh$ = LAPACKE_zhbevx_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhbevx_2stage_work", matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail);
            }
            return (int)mh$.invokeExact(matrix_layout, jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssygv_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssygv_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssygv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, float *a, int lda, float *b, int ldb, float *w)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssygv_2stage$descriptor() {
        return LAPACKE_ssygv_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssygv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, float *a, int lda, float *b, int ldb, float *w)
     * }
     */
    public static MethodHandle LAPACKE_ssygv_2stage$handle() {
        return LAPACKE_ssygv_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssygv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, float *a, int lda, float *b, int ldb, float *w)
     * }
     */
    public static MemorySegment LAPACKE_ssygv_2stage$address() {
        return LAPACKE_ssygv_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssygv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, float *a, int lda, float *b, int ldb, float *w)
     * }
     */
    public static int LAPACKE_ssygv_2stage(int matrix_layout, int itype, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment b, int ldb, MemorySegment w) {
        var mh$ = LAPACKE_ssygv_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssygv_2stage", matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w);
            }
            return (int)mh$.invokeExact(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsygv_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsygv_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsygv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, double *a, int lda, double *b, int ldb, double *w)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsygv_2stage$descriptor() {
        return LAPACKE_dsygv_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsygv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, double *a, int lda, double *b, int ldb, double *w)
     * }
     */
    public static MethodHandle LAPACKE_dsygv_2stage$handle() {
        return LAPACKE_dsygv_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsygv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, double *a, int lda, double *b, int ldb, double *w)
     * }
     */
    public static MemorySegment LAPACKE_dsygv_2stage$address() {
        return LAPACKE_dsygv_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsygv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, double *a, int lda, double *b, int ldb, double *w)
     * }
     */
    public static int LAPACKE_dsygv_2stage(int matrix_layout, int itype, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment b, int ldb, MemorySegment w) {
        var mh$ = LAPACKE_dsygv_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsygv_2stage", matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w);
            }
            return (int)mh$.invokeExact(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssygv_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssygv_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssygv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, float *a, int lda, float *b, int ldb, float *w, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssygv_2stage_work$descriptor() {
        return LAPACKE_ssygv_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssygv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, float *a, int lda, float *b, int ldb, float *w, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_ssygv_2stage_work$handle() {
        return LAPACKE_ssygv_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssygv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, float *a, int lda, float *b, int ldb, float *w, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_ssygv_2stage_work$address() {
        return LAPACKE_ssygv_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssygv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, float *a, int lda, float *b, int ldb, float *w, float *work, int lwork)
     * }
     */
    public static int LAPACKE_ssygv_2stage_work(int matrix_layout, int itype, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment b, int ldb, MemorySegment w, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_ssygv_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssygv_2stage_work", matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsygv_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsygv_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsygv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, double *a, int lda, double *b, int ldb, double *w, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsygv_2stage_work$descriptor() {
        return LAPACKE_dsygv_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsygv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, double *a, int lda, double *b, int ldb, double *w, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dsygv_2stage_work$handle() {
        return LAPACKE_dsygv_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsygv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, double *a, int lda, double *b, int ldb, double *w, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dsygv_2stage_work$address() {
        return LAPACKE_dsygv_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsygv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, double *a, int lda, double *b, int ldb, double *w, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dsygv_2stage_work(int matrix_layout, int itype, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment b, int ldb, MemorySegment w, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dsygv_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsygv_2stage_work", matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chegv_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chegv_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chegv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex float *a, int lda, _Complex float *b, int ldb, float *w)
     * }
     */
    public static FunctionDescriptor LAPACKE_chegv_2stage$descriptor() {
        return LAPACKE_chegv_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chegv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex float *a, int lda, _Complex float *b, int ldb, float *w)
     * }
     */
    public static MethodHandle LAPACKE_chegv_2stage$handle() {
        return LAPACKE_chegv_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chegv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex float *a, int lda, _Complex float *b, int ldb, float *w)
     * }
     */
    public static MemorySegment LAPACKE_chegv_2stage$address() {
        return LAPACKE_chegv_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chegv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex float *a, int lda, _Complex float *b, int ldb, float *w)
     * }
     */
    public static int LAPACKE_chegv_2stage(int matrix_layout, int itype, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment b, int ldb, MemorySegment w) {
        var mh$ = LAPACKE_chegv_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chegv_2stage", matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w);
            }
            return (int)mh$.invokeExact(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhegv_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhegv_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhegv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex double *a, int lda, _Complex double *b, int ldb, double *w)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhegv_2stage$descriptor() {
        return LAPACKE_zhegv_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhegv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex double *a, int lda, _Complex double *b, int ldb, double *w)
     * }
     */
    public static MethodHandle LAPACKE_zhegv_2stage$handle() {
        return LAPACKE_zhegv_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhegv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex double *a, int lda, _Complex double *b, int ldb, double *w)
     * }
     */
    public static MemorySegment LAPACKE_zhegv_2stage$address() {
        return LAPACKE_zhegv_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhegv_2stage(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex double *a, int lda, _Complex double *b, int ldb, double *w)
     * }
     */
    public static int LAPACKE_zhegv_2stage(int matrix_layout, int itype, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment b, int ldb, MemorySegment w) {
        var mh$ = LAPACKE_zhegv_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhegv_2stage", matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w);
            }
            return (int)mh$.invokeExact(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chegv_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chegv_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chegv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex float *a, int lda, _Complex float *b, int ldb, float *w, _Complex float *work, int lwork, float *rwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_chegv_2stage_work$descriptor() {
        return LAPACKE_chegv_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chegv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex float *a, int lda, _Complex float *b, int ldb, float *w, _Complex float *work, int lwork, float *rwork)
     * }
     */
    public static MethodHandle LAPACKE_chegv_2stage_work$handle() {
        return LAPACKE_chegv_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chegv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex float *a, int lda, _Complex float *b, int ldb, float *w, _Complex float *work, int lwork, float *rwork)
     * }
     */
    public static MemorySegment LAPACKE_chegv_2stage_work$address() {
        return LAPACKE_chegv_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chegv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex float *a, int lda, _Complex float *b, int ldb, float *w, _Complex float *work, int lwork, float *rwork)
     * }
     */
    public static int LAPACKE_chegv_2stage_work(int matrix_layout, int itype, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment b, int ldb, MemorySegment w, MemorySegment work, int lwork, MemorySegment rwork) {
        var mh$ = LAPACKE_chegv_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chegv_2stage_work", matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork);
            }
            return (int)mh$.invokeExact(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhegv_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhegv_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhegv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex double *a, int lda, _Complex double *b, int ldb, double *w, _Complex double *work, int lwork, double *rwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhegv_2stage_work$descriptor() {
        return LAPACKE_zhegv_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhegv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex double *a, int lda, _Complex double *b, int ldb, double *w, _Complex double *work, int lwork, double *rwork)
     * }
     */
    public static MethodHandle LAPACKE_zhegv_2stage_work$handle() {
        return LAPACKE_zhegv_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhegv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex double *a, int lda, _Complex double *b, int ldb, double *w, _Complex double *work, int lwork, double *rwork)
     * }
     */
    public static MemorySegment LAPACKE_zhegv_2stage_work$address() {
        return LAPACKE_zhegv_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhegv_2stage_work(int matrix_layout, int itype, char jobz, char uplo, int n, _Complex double *a, int lda, _Complex double *b, int ldb, double *w, _Complex double *work, int lwork, double *rwork)
     * }
     */
    public static int LAPACKE_zhegv_2stage_work(int matrix_layout, int itype, byte jobz, byte uplo, int n, MemorySegment a, int lda, MemorySegment b, int ldb, MemorySegment w, MemorySegment work, int lwork, MemorySegment rwork) {
        var mh$ = LAPACKE_zhegv_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhegv_2stage_work", matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork);
            }
            return (int)mh$.invokeExact(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssysv_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssysv_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssysv_aa_2stage$descriptor() {
        return LAPACKE_ssysv_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_ssysv_aa_2stage$handle() {
        return LAPACKE_ssysv_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_ssysv_aa_2stage$address() {
        return LAPACKE_ssysv_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb)
     * }
     */
    public static int LAPACKE_ssysv_aa_2stage(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_ssysv_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssysv_aa_2stage", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssysv_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssysv_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssysv_aa_2stage_work$descriptor() {
        return LAPACKE_ssysv_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_ssysv_aa_2stage_work$handle() {
        return LAPACKE_ssysv_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_ssysv_aa_2stage_work$address() {
        return LAPACKE_ssysv_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb, float *work, int lwork)
     * }
     */
    public static int LAPACKE_ssysv_aa_2stage_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_ssysv_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssysv_aa_2stage_work", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsysv_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsysv_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsysv_aa_2stage$descriptor() {
        return LAPACKE_dsysv_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_dsysv_aa_2stage$handle() {
        return LAPACKE_dsysv_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_dsysv_aa_2stage$address() {
        return LAPACKE_dsysv_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb)
     * }
     */
    public static int LAPACKE_dsysv_aa_2stage(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_dsysv_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsysv_aa_2stage", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsysv_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsysv_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsysv_aa_2stage_work$descriptor() {
        return LAPACKE_dsysv_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dsysv_aa_2stage_work$handle() {
        return LAPACKE_dsysv_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dsysv_aa_2stage_work$address() {
        return LAPACKE_dsysv_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dsysv_aa_2stage_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dsysv_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsysv_aa_2stage_work", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csysv_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csysv_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_csysv_aa_2stage$descriptor() {
        return LAPACKE_csysv_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_csysv_aa_2stage$handle() {
        return LAPACKE_csysv_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_csysv_aa_2stage$address() {
        return LAPACKE_csysv_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_csysv_aa_2stage(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_csysv_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csysv_aa_2stage", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csysv_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csysv_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_csysv_aa_2stage_work$descriptor() {
        return LAPACKE_csysv_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_csysv_aa_2stage_work$handle() {
        return LAPACKE_csysv_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_csysv_aa_2stage_work$address() {
        return LAPACKE_csysv_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_csysv_aa_2stage_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_csysv_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csysv_aa_2stage_work", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsysv_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsysv_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsysv_aa_2stage$descriptor() {
        return LAPACKE_zsysv_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zsysv_aa_2stage$handle() {
        return LAPACKE_zsysv_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zsysv_aa_2stage$address() {
        return LAPACKE_zsysv_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsysv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zsysv_aa_2stage(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zsysv_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsysv_aa_2stage", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsysv_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsysv_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsysv_aa_2stage_work$descriptor() {
        return LAPACKE_zsysv_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zsysv_aa_2stage_work$handle() {
        return LAPACKE_zsysv_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zsysv_aa_2stage_work$address() {
        return LAPACKE_zsysv_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsysv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zsysv_aa_2stage_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zsysv_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsysv_aa_2stage_work", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chesv_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chesv_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chesv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_chesv_aa_2stage$descriptor() {
        return LAPACKE_chesv_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chesv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_chesv_aa_2stage$handle() {
        return LAPACKE_chesv_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chesv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_chesv_aa_2stage$address() {
        return LAPACKE_chesv_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chesv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_chesv_aa_2stage(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_chesv_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chesv_aa_2stage", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chesv_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chesv_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chesv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_chesv_aa_2stage_work$descriptor() {
        return LAPACKE_chesv_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chesv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_chesv_aa_2stage_work$handle() {
        return LAPACKE_chesv_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chesv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_chesv_aa_2stage_work$address() {
        return LAPACKE_chesv_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chesv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_chesv_aa_2stage_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_chesv_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chesv_aa_2stage_work", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhesv_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhesv_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhesv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhesv_aa_2stage$descriptor() {
        return LAPACKE_zhesv_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhesv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zhesv_aa_2stage$handle() {
        return LAPACKE_zhesv_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhesv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zhesv_aa_2stage$address() {
        return LAPACKE_zhesv_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhesv_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zhesv_aa_2stage(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zhesv_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhesv_aa_2stage", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhesv_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhesv_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhesv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhesv_aa_2stage_work$descriptor() {
        return LAPACKE_zhesv_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhesv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zhesv_aa_2stage_work$handle() {
        return LAPACKE_zhesv_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhesv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zhesv_aa_2stage_work$address() {
        return LAPACKE_zhesv_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhesv_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zhesv_aa_2stage_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zhesv_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhesv_aa_2stage_work", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssytrf_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssytrf_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_aa_2stage(int matrix_layout, char uplo, int n, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssytrf_aa_2stage$descriptor() {
        return LAPACKE_ssytrf_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_aa_2stage(int matrix_layout, char uplo, int n, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static MethodHandle LAPACKE_ssytrf_aa_2stage$handle() {
        return LAPACKE_ssytrf_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_aa_2stage(int matrix_layout, char uplo, int n, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static MemorySegment LAPACKE_ssytrf_aa_2stage$address() {
        return LAPACKE_ssytrf_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_aa_2stage(int matrix_layout, char uplo, int n, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static int LAPACKE_ssytrf_aa_2stage(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2) {
        var mh$ = LAPACKE_ssytrf_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssytrf_aa_2stage", matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssytrf_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssytrf_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_aa_2stage_work(int matrix_layout, char uplo, int n, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssytrf_aa_2stage_work$descriptor() {
        return LAPACKE_ssytrf_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_aa_2stage_work(int matrix_layout, char uplo, int n, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_ssytrf_aa_2stage_work$handle() {
        return LAPACKE_ssytrf_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_aa_2stage_work(int matrix_layout, char uplo, int n, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_ssytrf_aa_2stage_work$address() {
        return LAPACKE_ssytrf_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssytrf_aa_2stage_work(int matrix_layout, char uplo, int n, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *work, int lwork)
     * }
     */
    public static int LAPACKE_ssytrf_aa_2stage_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_ssytrf_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssytrf_aa_2stage_work", matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsytrf_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsytrf_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_aa_2stage(int matrix_layout, char uplo, int n, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsytrf_aa_2stage$descriptor() {
        return LAPACKE_dsytrf_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_aa_2stage(int matrix_layout, char uplo, int n, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static MethodHandle LAPACKE_dsytrf_aa_2stage$handle() {
        return LAPACKE_dsytrf_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_aa_2stage(int matrix_layout, char uplo, int n, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static MemorySegment LAPACKE_dsytrf_aa_2stage$address() {
        return LAPACKE_dsytrf_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_aa_2stage(int matrix_layout, char uplo, int n, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static int LAPACKE_dsytrf_aa_2stage(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2) {
        var mh$ = LAPACKE_dsytrf_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsytrf_aa_2stage", matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsytrf_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsytrf_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_aa_2stage_work(int matrix_layout, char uplo, int n, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsytrf_aa_2stage_work$descriptor() {
        return LAPACKE_dsytrf_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_aa_2stage_work(int matrix_layout, char uplo, int n, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_dsytrf_aa_2stage_work$handle() {
        return LAPACKE_dsytrf_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_aa_2stage_work(int matrix_layout, char uplo, int n, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_dsytrf_aa_2stage_work$address() {
        return LAPACKE_dsytrf_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsytrf_aa_2stage_work(int matrix_layout, char uplo, int n, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *work, int lwork)
     * }
     */
    public static int LAPACKE_dsytrf_aa_2stage_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_dsytrf_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsytrf_aa_2stage_work", matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csytrf_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csytrf_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csytrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static FunctionDescriptor LAPACKE_csytrf_aa_2stage$descriptor() {
        return LAPACKE_csytrf_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csytrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static MethodHandle LAPACKE_csytrf_aa_2stage$handle() {
        return LAPACKE_csytrf_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csytrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static MemorySegment LAPACKE_csytrf_aa_2stage$address() {
        return LAPACKE_csytrf_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csytrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static int LAPACKE_csytrf_aa_2stage(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2) {
        var mh$ = LAPACKE_csytrf_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csytrf_aa_2stage", matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csytrf_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csytrf_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csytrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_csytrf_aa_2stage_work$descriptor() {
        return LAPACKE_csytrf_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csytrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_csytrf_aa_2stage_work$handle() {
        return LAPACKE_csytrf_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csytrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_csytrf_aa_2stage_work$address() {
        return LAPACKE_csytrf_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csytrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_csytrf_aa_2stage_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_csytrf_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csytrf_aa_2stage_work", matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsytrf_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsytrf_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsytrf_aa_2stage$descriptor() {
        return LAPACKE_zsytrf_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static MethodHandle LAPACKE_zsytrf_aa_2stage$handle() {
        return LAPACKE_zsytrf_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static MemorySegment LAPACKE_zsytrf_aa_2stage$address() {
        return LAPACKE_zsytrf_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static int LAPACKE_zsytrf_aa_2stage(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2) {
        var mh$ = LAPACKE_zsytrf_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsytrf_aa_2stage", matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsytrf_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsytrf_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsytrf_aa_2stage_work$descriptor() {
        return LAPACKE_zsytrf_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zsytrf_aa_2stage_work$handle() {
        return LAPACKE_zsytrf_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zsytrf_aa_2stage_work$address() {
        return LAPACKE_zsytrf_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsytrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zsytrf_aa_2stage_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zsytrf_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsytrf_aa_2stage_work", matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chetrf_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chetrf_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chetrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static FunctionDescriptor LAPACKE_chetrf_aa_2stage$descriptor() {
        return LAPACKE_chetrf_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chetrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static MethodHandle LAPACKE_chetrf_aa_2stage$handle() {
        return LAPACKE_chetrf_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chetrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static MemorySegment LAPACKE_chetrf_aa_2stage$address() {
        return LAPACKE_chetrf_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chetrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static int LAPACKE_chetrf_aa_2stage(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2) {
        var mh$ = LAPACKE_chetrf_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chetrf_aa_2stage", matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chetrf_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chetrf_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chetrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_chetrf_aa_2stage_work$descriptor() {
        return LAPACKE_chetrf_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chetrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_chetrf_aa_2stage_work$handle() {
        return LAPACKE_chetrf_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chetrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_chetrf_aa_2stage_work$address() {
        return LAPACKE_chetrf_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chetrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *work, int lwork)
     * }
     */
    public static int LAPACKE_chetrf_aa_2stage_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_chetrf_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chetrf_aa_2stage_work", matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhetrf_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhetrf_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhetrf_aa_2stage$descriptor() {
        return LAPACKE_zhetrf_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static MethodHandle LAPACKE_zhetrf_aa_2stage$handle() {
        return LAPACKE_zhetrf_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static MemorySegment LAPACKE_zhetrf_aa_2stage$address() {
        return LAPACKE_zhetrf_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_aa_2stage(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2)
     * }
     */
    public static int LAPACKE_zhetrf_aa_2stage(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2) {
        var mh$ = LAPACKE_zhetrf_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhetrf_aa_2stage", matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhetrf_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhetrf_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *work, int lwork)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhetrf_aa_2stage_work$descriptor() {
        return LAPACKE_zhetrf_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *work, int lwork)
     * }
     */
    public static MethodHandle LAPACKE_zhetrf_aa_2stage_work$handle() {
        return LAPACKE_zhetrf_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *work, int lwork)
     * }
     */
    public static MemorySegment LAPACKE_zhetrf_aa_2stage_work$address() {
        return LAPACKE_zhetrf_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhetrf_aa_2stage_work(int matrix_layout, char uplo, int n, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *work, int lwork)
     * }
     */
    public static int LAPACKE_zhetrf_aa_2stage_work(int matrix_layout, byte uplo, int n, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment work, int lwork) {
        var mh$ = LAPACKE_zhetrf_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhetrf_aa_2stage_work", matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssytrs_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssytrs_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssytrs_aa_2stage$descriptor() {
        return LAPACKE_ssytrs_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_ssytrs_aa_2stage$handle() {
        return LAPACKE_ssytrs_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_ssytrs_aa_2stage$address() {
        return LAPACKE_ssytrs_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb)
     * }
     */
    public static int LAPACKE_ssytrs_aa_2stage(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_ssytrs_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssytrs_aa_2stage", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_ssytrs_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_ssytrs_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_ssytrs_aa_2stage_work$descriptor() {
        return LAPACKE_ssytrs_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_ssytrs_aa_2stage_work$handle() {
        return LAPACKE_ssytrs_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_ssytrs_aa_2stage_work$address() {
        return LAPACKE_ssytrs_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_ssytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, float *a, int lda, float *tb, int ltb, int *ipiv, int *ipiv2, float *b, int ldb)
     * }
     */
    public static int LAPACKE_ssytrs_aa_2stage_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_ssytrs_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_ssytrs_aa_2stage_work", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsytrs_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsytrs_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsytrs_aa_2stage$descriptor() {
        return LAPACKE_dsytrs_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_dsytrs_aa_2stage$handle() {
        return LAPACKE_dsytrs_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_dsytrs_aa_2stage$address() {
        return LAPACKE_dsytrs_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb)
     * }
     */
    public static int LAPACKE_dsytrs_aa_2stage(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_dsytrs_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsytrs_aa_2stage", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_dsytrs_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_dsytrs_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_dsytrs_aa_2stage_work$descriptor() {
        return LAPACKE_dsytrs_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_dsytrs_aa_2stage_work$handle() {
        return LAPACKE_dsytrs_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_dsytrs_aa_2stage_work$address() {
        return LAPACKE_dsytrs_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_dsytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, double *a, int lda, double *tb, int ltb, int *ipiv, int *ipiv2, double *b, int ldb)
     * }
     */
    public static int LAPACKE_dsytrs_aa_2stage_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_dsytrs_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_dsytrs_aa_2stage_work", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csytrs_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csytrs_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_csytrs_aa_2stage$descriptor() {
        return LAPACKE_csytrs_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_csytrs_aa_2stage$handle() {
        return LAPACKE_csytrs_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_csytrs_aa_2stage$address() {
        return LAPACKE_csytrs_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_csytrs_aa_2stage(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_csytrs_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csytrs_aa_2stage", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_csytrs_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_csytrs_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_csytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_csytrs_aa_2stage_work$descriptor() {
        return LAPACKE_csytrs_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_csytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_csytrs_aa_2stage_work$handle() {
        return LAPACKE_csytrs_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_csytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_csytrs_aa_2stage_work$address() {
        return LAPACKE_csytrs_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_csytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_csytrs_aa_2stage_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_csytrs_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_csytrs_aa_2stage_work", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsytrs_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsytrs_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsytrs_aa_2stage$descriptor() {
        return LAPACKE_zsytrs_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zsytrs_aa_2stage$handle() {
        return LAPACKE_zsytrs_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zsytrs_aa_2stage$address() {
        return LAPACKE_zsytrs_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zsytrs_aa_2stage(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zsytrs_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsytrs_aa_2stage", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zsytrs_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zsytrs_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zsytrs_aa_2stage_work$descriptor() {
        return LAPACKE_zsytrs_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zsytrs_aa_2stage_work$handle() {
        return LAPACKE_zsytrs_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zsytrs_aa_2stage_work$address() {
        return LAPACKE_zsytrs_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zsytrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zsytrs_aa_2stage_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zsytrs_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zsytrs_aa_2stage_work", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chetrs_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chetrs_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chetrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_chetrs_aa_2stage$descriptor() {
        return LAPACKE_chetrs_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chetrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_chetrs_aa_2stage$handle() {
        return LAPACKE_chetrs_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chetrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_chetrs_aa_2stage$address() {
        return LAPACKE_chetrs_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chetrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_chetrs_aa_2stage(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_chetrs_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chetrs_aa_2stage", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_chetrs_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_chetrs_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_chetrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_chetrs_aa_2stage_work$descriptor() {
        return LAPACKE_chetrs_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_chetrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_chetrs_aa_2stage_work$handle() {
        return LAPACKE_chetrs_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_chetrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_chetrs_aa_2stage_work$address() {
        return LAPACKE_chetrs_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_chetrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex float *a, int lda, _Complex float *tb, int ltb, int *ipiv, int *ipiv2, _Complex float *b, int ldb)
     * }
     */
    public static int LAPACKE_chetrs_aa_2stage_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_chetrs_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_chetrs_aa_2stage_work", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhetrs_aa_2stage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhetrs_aa_2stage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhetrs_aa_2stage$descriptor() {
        return LAPACKE_zhetrs_aa_2stage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zhetrs_aa_2stage$handle() {
        return LAPACKE_zhetrs_aa_2stage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zhetrs_aa_2stage$address() {
        return LAPACKE_zhetrs_aa_2stage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa_2stage(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zhetrs_aa_2stage(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zhetrs_aa_2stage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhetrs_aa_2stage", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_zhetrs_aa_2stage_work {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_CHAR,
            lapacke_h.C_INT,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_POINTER,
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_zhetrs_aa_2stage_work");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static FunctionDescriptor LAPACKE_zhetrs_aa_2stage_work$descriptor() {
        return LAPACKE_zhetrs_aa_2stage_work.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static MethodHandle LAPACKE_zhetrs_aa_2stage_work$handle() {
        return LAPACKE_zhetrs_aa_2stage_work.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static MemorySegment LAPACKE_zhetrs_aa_2stage_work$address() {
        return LAPACKE_zhetrs_aa_2stage_work.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_zhetrs_aa_2stage_work(int matrix_layout, char uplo, int n, int nrhs, _Complex double *a, int lda, _Complex double *tb, int ltb, int *ipiv, int *ipiv2, _Complex double *b, int ldb)
     * }
     */
    public static int LAPACKE_zhetrs_aa_2stage_work(int matrix_layout, byte uplo, int n, int nrhs, MemorySegment a, int lda, MemorySegment tb, int ltb, MemorySegment ipiv, MemorySegment ipiv2, MemorySegment b, int ldb) {
        var mh$ = LAPACKE_zhetrs_aa_2stage_work.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_zhetrs_aa_2stage_work", matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
            }
            return (int)mh$.invokeExact(matrix_layout, uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_set_nancheck {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            lapacke_h.C_INT
        );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_set_nancheck");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void LAPACKE_set_nancheck(int flag)
     * }
     */
    public static FunctionDescriptor LAPACKE_set_nancheck$descriptor() {
        return LAPACKE_set_nancheck.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void LAPACKE_set_nancheck(int flag)
     * }
     */
    public static MethodHandle LAPACKE_set_nancheck$handle() {
        return LAPACKE_set_nancheck.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void LAPACKE_set_nancheck(int flag)
     * }
     */
    public static MemorySegment LAPACKE_set_nancheck$address() {
        return LAPACKE_set_nancheck.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void LAPACKE_set_nancheck(int flag)
     * }
     */
    public static void LAPACKE_set_nancheck(int flag) {
        var mh$ = LAPACKE_set_nancheck.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_set_nancheck", flag);
            }
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LAPACKE_get_nancheck {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lapacke_h.C_INT    );

        public static final MemorySegment ADDR = lapacke_h.findOrThrow("LAPACKE_get_nancheck");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC, Linker.Option.critical(true));
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LAPACKE_get_nancheck()
     * }
     */
    public static FunctionDescriptor LAPACKE_get_nancheck$descriptor() {
        return LAPACKE_get_nancheck.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LAPACKE_get_nancheck()
     * }
     */
    public static MethodHandle LAPACKE_get_nancheck$handle() {
        return LAPACKE_get_nancheck.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LAPACKE_get_nancheck()
     * }
     */
    public static MemorySegment LAPACKE_get_nancheck$address() {
        return LAPACKE_get_nancheck.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LAPACKE_get_nancheck()
     * }
     */
    public static int LAPACKE_get_nancheck() {
        var mh$ = LAPACKE_get_nancheck.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LAPACKE_get_nancheck");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int __WCLONE = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCLONE 2147483648
     * }
     */
    public static int __WCLONE() {
        return __WCLONE;
    }
    private static final int __HAVE_DISTINCT_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return __HAVE_DISTINCT_FLOAT16;
    }
    private static final int __HAVE_DISTINCT_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return __HAVE_DISTINCT_FLOAT128X;
    }
    private static final int __HAVE_FLOAT128_UNLIKE_LDBL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return __HAVE_FLOAT128_UNLIKE_LDBL;
    }
    private static final int __BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return __BYTE_ORDER;
    }
    private static final int __FLOAT_WORD_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return __FLOAT_WORD_ORDER;
    }
    private static final int LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return LITTLE_ENDIAN;
    }
    private static final int BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return BIG_ENDIAN;
    }
    private static final int PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return PDP_ENDIAN;
    }
    private static final int BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return BYTE_ORDER;
    }
    private static final long _SIGSET_NWORDS = 16L;
    /**
     * {@snippet lang=c :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return _SIGSET_NWORDS;
    }
    private static final int __NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return __NFDBITS;
    }
    private static final int FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return NFDBITS;
    }
    private static final int __PTHREAD_RWLOCK_ELISION_EXTRA = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return __PTHREAD_RWLOCK_ELISION_EXTRA;
    }
    private static final float _Complex_I = 0f;
    /**
     * {@snippet lang=c :
     * #define _Complex_I 0
     * }
     */
    public static float _Complex_I() {
        return _Complex_I;
    }
    private static final float I = 0f;
    /**
     * {@snippet lang=c :
     * #define I 0
     * }
     */
    public static float I() {
        return I;
    }
    private static final int LAPACK_WORK_MEMORY_ERROR = (int)-1010L;
    /**
     * {@snippet lang=c :
     * #define LAPACK_WORK_MEMORY_ERROR -1010
     * }
     */
    public static int LAPACK_WORK_MEMORY_ERROR() {
        return LAPACK_WORK_MEMORY_ERROR;
    }
    private static final int LAPACK_TRANSPOSE_MEMORY_ERROR = (int)-1011L;
    /**
     * {@snippet lang=c :
     * #define LAPACK_TRANSPOSE_MEMORY_ERROR -1011
     * }
     */
    public static int LAPACK_TRANSPOSE_MEMORY_ERROR() {
        return LAPACK_TRANSPOSE_MEMORY_ERROR;
    }
}

